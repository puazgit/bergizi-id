// SPPG SaaS Platform - Complete Prisma Schema
// Sistem Manajemen SPPG (Satuan Pelayanan Pemenuhan Gizi)
// Focus: Menu Planning → Procurement → Production → Distribution → Reporting
// Extended with comprehensive SaaS subscription management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================ ENUMS ================================

enum SppgStatus {
  PENDING_APPROVAL // Menunggu Persetujuan
  ACTIVE // Aktif
  SUSPENDED // Ditangguhkan
  TERMINATED // Dihentikan
  INACTIVE // Nonaktif
}

enum SubscriptionStatus {
  TRIAL // Uji Coba
  ACTIVE // Aktif
  OVERDUE // Terlambat Bayar
  CANCELLED // Dibatalkan
  PAUSED // Dijeda
  UPGRADE_PENDING // Menunggu Upgrade
}

enum SubscriptionTier {
  BASIC
  STANDARD
  PRO
  ENTERPRISE
}

enum OrganizationType {
  PEMERINTAH // Government
  SWASTA // Private
  YAYASAN // Foundation
  KOMUNITAS // Community
  LAINNYA // Others
}

enum UserType {
  SUPERADMIN // SuperAdmin Platform (Pengelola Platform)
  SPPG_ADMIN // Admin SPPG (Kepala SPPG)
  SPPG_USER // User SPPG (Staff SPPG)
  DEMO_REQUEST // User yang Request Demo
  PROSPECT // Prospective Customer
}

enum PaymentStatus {
  PENDING // Menunggu
  PROCESSING // Diproses
  COMPLETED // Berhasil
  FAILED // Gagal
  CANCELLED // Dibatalkan
  REFUNDED // Dikembalikan
}

// === SaaS Platform Management Enums (NEW) ===
enum SubscriptionChangeType {
  UPGRADE // Upgrade paket
  DOWNGRADE // Downgrade paket
  RENEWAL // Perpanjangan
  CANCELLATION // Pembatalan
  REACTIVATION // Reaktivasi
  PAUSE // Jeda sementara
  RESUME // Lanjutkan setelah jeda
}

enum BillingFrequency {
  MONTHLY // Bulanan
  QUARTERLY // Kuartalan
  YEARLY // Tahunan
  CUSTOM // Kustom
}

enum PaymentMethodType {
  CREDIT_CARD // Kartu Kredit
  BANK_TRANSFER // Transfer Bank
  E_WALLET // E-Wallet
  MANUAL // Manual
  CRYPTO // Cryptocurrency
}

enum DunningStage {
  FIRST_REMINDER // Pengingat Pertama (3 hari)
  SECOND_REMINDER // Pengingat Kedua (7 hari)
  FINAL_NOTICE // Pemberitahuan Terakhir (14 hari)
  SUSPENSION_WARNING // Peringatan Penangguhan (21 hari)
  SUSPENDED // Ditangguhkan
  TERMINATION // Terminasi (30 hari)
}

// === Indonesia Regional Master Data Enums ===
enum IndonesiaRegion {
  SUMATERA
  JAWA
  KALIMANTAN
  SULAWESI
  PAPUA
  BALI_NUSRA
  MALUKU
}

enum Timezone {
  WIB // Waktu Indonesia Barat
  WITA // Waktu Indonesia Tengah  
  WIT // Waktu Indonesia Timur
}

enum RegencyType {
  REGENCY
  CITY
}

enum VillageType {
  URBAN_VILLAGE
  RURAL_VILLAGE
}

enum UsageResourceType {
  RECIPIENTS // Penerima makanan
  STAFF // Staff/Karyawan
  DISTRIBUTION_POINTS // Titik distribusi
  API_CALLS // Panggilan API
  STORAGE_GB // Penyimpanan GB
  REPORTS_GENERATED // Laporan yang dibuat
  MENUS_CREATED // Menu yang dibuat
}

enum TrialNotificationType {
  WELCOME // Selamat datang
  DAY_7_REMINDER // Pengingat 7 hari tersisa
  DAY_3_REMINDER // Pengingat 3 hari tersisa
  DAY_1_REMINDER // Pengingat 1 hari tersisa
  EXPIRED // Trial berakhir
  EXTENSION_GRANTED // Perpanjangan diberikan
}

enum BillingCycleStatus {
  PENDING // Menunggu
  INVOICED // Sudah ditagih
  PAID // Sudah dibayar
  OVERDUE // Terlambat
  CANCELLED // Dibatalkan
}

// === Additional SaaS Platform Enums ===
enum SupportTicketStatus {
  OPEN // Terbuka
  IN_PROGRESS // Dalam Proses
  WAITING_FOR_CUSTOMER // Menunggu Customer
  RESOLVED // Diselesaikan
  CLOSED // Ditutup
}

enum SupportTicketPriority {
  LOW // Rendah
  MEDIUM // Sedang  
  HIGH // Tinggi
  URGENT // Mendesak
}

enum SupportTicketCategory {
  TECHNICAL // Teknis
  BILLING // Billing
  FEATURE_REQUEST // Permintaan Fitur
  BUG_REPORT // Laporan Bug
  GENERAL // Umum
}

enum NotificationType {
  EMAIL // Email
  IN_APP // In-App
  SMS // SMS
  PUSH // Push Notification
}

enum NotificationPriority {
  LOW // Rendah
  NORMAL // Normal
  HIGH // Tinggi
  URGENT // Mendesak
}

enum AuditAction {
  CREATE // Buat
  READ // Baca
  UPDATE // Update
  DELETE // Hapus
  LOGIN // Login
  LOGOUT // Logout
  EXPORT // Export
  IMPORT // Import
}

// === Demo System Enums ===
enum DemoRequestStatus {
  SUBMITTED // Permintaan diajukan
  UNDER_REVIEW // Sedang direview
  APPROVED // Disetujui
  REJECTED // Ditolak
  DEMO_ACTIVE // Demo sedang berjalan
  EXPIRED // Demo sudah expired
  CONVERTED // Berhasil convert ke paid
  CANCELLED // Dibatalkan
}

enum DemoType {
  STANDARD // Demo standar 14 hari
  EXTENDED // Demo extended 30 hari (khusus)
  GUIDED // Demo dengan guidance intensif
  SELF_SERVICE // Demo mandiri
}

// === Sales dan Demo management tidak diperlukan di fase operasional ini ===

// === SPPG OPERATIONAL ENUMS ===
enum ProgramType {
  NUTRITIONAL_RECOVERY // Nutritional Recovery
  NUTRITIONAL_EDUCATION // Nutritional Education
  SUPPLEMENTARY_FEEDING // Supplementary Feeding
  EMERGENCY_NUTRITION // Emergency Nutrition
  STUNTING_INTERVENTION // Stunting Intervention
}

enum TargetGroup {
  TODDLER // 6-59 months
  PREGNANT_WOMAN // Pregnant Woman
  BREASTFEEDING_MOTHER // Breastfeeding Mother
  TEENAGE_GIRL // Teenage Girl
  ELDERLY // Elderly
  SCHOOL_CHILDREN // School Children
}

enum MealType {
  SARAPAN // Sarapan
  MAKAN_SIANG // Makan Siang
  SNACK_PAGI // Snack Pagi
  SNACK_SORE // Snack Sore
  MAKAN_MALAM // Makan Malam
}

enum NutritionStatus {
  WELL_NOURISHED // Well Nourished
  UNDERNOURISHED // Undernourished  
  SEVERELY_UNDERNOURISHED // Severely Undernourished
  OVER_NOURISHED // Over Nourished
  OBESE // Obese
}

enum ProductionStatus {
  PLANNED // Direncanakan
  PREPARING // Persiapan
  COOKING // Memasak
  QUALITY_CHECK // Pemeriksaan Kualitas
  COMPLETED // Selesai
  CANCELLED // Dibatalkan
}

enum DistributionStatus {
  SCHEDULED // Dijadwalkan
  PREPARING // Persiapan
  IN_TRANSIT // Dalam Perjalanan
  DISTRIBUTING // Sedang Distribusi
  COMPLETED // Selesai
  CANCELLED // Dibatalkan
}

enum DeliveryStatus {
  SCHEDULED // Dijadwalkan
  DELIVERED // Terkirim
  FAILED // Gagal
  RETURNED // Dikembalikan
  PARTIAL // Sebagian
}

// === Procurement Management Enums ===
enum ProcurementStatus {
  DRAFT // Draft
  PENDING_APPROVAL // Menunggu Persetujuan
  APPROVED // Disetujui
  ORDERED // Dipesan
  PARTIALLY_RECEIVED // Sebagian Diterima
  FULLY_RECEIVED // Sepenuhnya Diterima
  COMPLETED // Selesai
  CANCELLED // Dibatalkan
  REJECTED // Ditolak
}

enum ProcurementMethod {
  DIRECT // Pembelian Langsung
  TENDER // Tender
  CONTRACT // Kontrak
  EMERGENCY // Darurat
  BULK // Pembelian Massal
}

enum SupplierType {
  LOCAL // Lokal
  REGIONAL // Regional
  NATIONAL // Nasional
  INTERNATIONAL // Internasional
  COOPERATIVE // Koperasi
  INDIVIDUAL // Perorangan
}

enum QualityGrade {
  EXCELLENT // Sangat Baik
  GOOD // Baik
  FAIR // Cukup
  POOR // Kurang
  REJECTED // Ditolak
}

// === Distribution Management Enums ===
enum BeneficiaryType {
  CHILD // Anak
  PREGNANT_MOTHER // Ibu Hamil
  LACTATING_MOTHER // Ibu Menyusui
  ELDERLY // Lansia
  DISABILITY // Disabilitas
}

// === Feedback System Enums ===
enum FeedbackType {
  COMPLAINT // Keluhan
  SUGGESTION // Saran
  COMPLIMENT // Pujian
  INQUIRY // Pertanyaan
  QUALITY_ISSUE // Masalah Kualitas
  SERVICE_ISSUE // Masalah Layanan
  PORTION_ISSUE // Masalah Porsi
  NUTRITION_CONCERN // Kekhawatiran Gizi
}

enum FeedbackStatus {
  PENDING // Menunggu Review
  IN_REVIEW // Sedang Ditinjau
  RESPONDED // Sudah Direspon
  RESOLVED // Sudah Diselesaikan
  CLOSED // Ditutup
  ESCALATED // Dieskalasi
}

enum FeedbackPriority {
  LOW // Rendah
  MEDIUM // Sedang
  HIGH // Tinggi
  CRITICAL // Kritis
}

enum DistributionMethod {
  DIRECT // Langsung
  PICKUP // Ambil Sendiri
  DELIVERY // Diantar
  MOBILE_UNIT // Unit Bergerak
}

// === Quality Control Enums ===
enum QualityStatus {
  PASSED // Lulus
  FAILED // Gagal
  CONDITIONAL // Bersyarat
  RETESTING // Pengujian Ulang
}

enum InspectionType {
  INCOMING // Bahan Masuk
  IN_PROCESS // Proses
  FINAL // Akhir
  RANDOM // Acak
  COMPLAINT // Keluhan
}

enum InventoryCategory {
  PROTEIN // Protein (daging, ikan, telur)
  KARBOHIDRAT // Karbohidrat (beras, mie)
  SAYURAN // Sayuran
  BUAH // Buah-buahan
  SUSU_OLAHAN // Susu dan Olahan
  BUMBU_REMPAH // Bumbu dan Rempah
  MINYAK_LEMAK // Minyak dan Lemak
  LAINNYA // Lainnya
}

enum MovementType {
  IN // Masuk
  OUT // Keluar
  ADJUSTMENT // Penyesuaian
  EXPIRED // Kadaluarsa
  DAMAGED // Rusak
  TRANSFER // Transfer
}

// === HRD Management Enums ===
enum EmploymentType {
  PERMANENT // Karyawan Tetap
  CONTRACT // Kontrak
  TEMPORARY // Sementara
  INTERN // Magang
  FREELANCE // Freelance
}

enum EmploymentStatus {
  ACTIVE // Aktif
  PROBATION // Masa Percobaan
  SUSPENDED // Diskors
  TERMINATED // Diberhentikan
  RESIGNED // Mengundurkan Diri
  RETIRED // Pensiun
}

enum MaritalStatus {
  SINGLE // Belum Menikah
  MARRIED // Menikah
  DIVORCED // Bercerai
  WIDOWED // Janda/Duda
}

enum Gender {
  MALE // Laki-laki
  FEMALE // Perempuan
}

enum AgeGroup {
  BALITA_6_23 // 6-23 bulan
  BALITA_2_5 // 2-5 tahun
  ANAK_6_12 // 6-12 tahun
  REMAJA_13_18 // 13-18 tahun
  DEWASA_19_59 // 19-59 tahun
  LANSIA_60_PLUS // 60+ tahun
}

enum ActivityLevel {
  SEDENTARY // Tidak aktif
  LIGHT // Aktivitas ringan
  MODERATE // Aktivitas sedang
  ACTIVE // Aktif
  VERY_ACTIVE // Sangat aktif
}

enum MenuPlanStatus {
  DRAFT // Draft
  PENDING_REVIEW // Menunggu Review
  REVIEWED // Di-review
  PENDING_APPROVAL // Menunggu Persetujuan
  APPROVED // Disetujui
  PUBLISHED // Dipublikasikan
  ACTIVE // Aktif
  COMPLETED // Selesai
  ARCHIVED // Diarsipkan
  CANCELLED // Dibatalkan
}

enum AssignmentStatus {
  PLANNED // Direncanakan
  CONFIRMED // Dikonfirmasi
  IN_PRODUCTION // Sedang Produksi
  PRODUCED // Diproduksi
  DISTRIBUTED // Didistribusikan
  COMPLETED // Selesai
  CANCELLED // Dibatalkan
  SUBSTITUTED // Diganti
}

enum LeaveType {
  ANNUAL // Cuti Tahunan
  SICK // Sakit
  EMERGENCY // Darurat
  MATERNITY // Melahirkan
  PATERNITY // Ayah Baru
  UNPAID // Tanpa Gaji
  STUDY // Belajar
  PILGRIMAGE // Ibadah Haji/Umroh
}

enum LeaveStatus {
  PENDING // Menunggu Persetujuan
  APPROVED // Disetujui
  REJECTED // Ditolak
  CANCELLED // Dibatalkan
  EXPIRED // Kadaluarsa
}

enum AttendanceStatus {
  PRESENT // Hadir
  LATE // Terlambat
  ABSENT // Tidak Hadir
  HALF_DAY // Setengah Hari
  OVERTIME // Lembur
  SICK_LEAVE // Sakit
  ANNUAL_LEAVE // Cuti
}

enum PayrollStatus {
  DRAFT // Draft
  CALCULATED // Sudah Dihitung
  APPROVED // Disetujui
  PAID // Sudah Dibayar
  CANCELLED // Dibatalkan
}

enum ReviewType {
  PROBATION // Review Masa Percobaan
  QUARTERLY // Kuartalan
  ANNUAL // Tahunan
  SPECIAL // Khusus
  EXIT // Exit Interview
}

enum EmployeeLevel {
  STAFF // Staff
  SUPERVISOR // Supervisor
  MANAGER // Manager
  SENIOR_MANAGER // Senior Manager
  DIRECTOR // Direktur
  EXECUTIVE // Eksekutif
}

enum DocumentType {
  ID_CARD // KTP
  PASSPORT // Paspor
  DRIVER_LICENSE // SIM
  CERTIFICATE // Sertifikat
  DIPLOMA // Ijazah
  RESUME // CV
  CONTRACT // Kontrak
  MEDICAL_CHECKUP // Medical Check Up
  OTHER // Lainnya
}

enum TrainingStatus {
  PLANNED // Direncanakan
  ONGOING // Sedang Berlangsung
  COMPLETED // Selesai
  CANCELLED // Dibatalkan
  POSTPONED // Ditunda
}

// === SPPG Operational Enums (SK Nomor 63 Tahun 2025) ===
enum DistributionWave {
  MORNING // Pagi (08:00) - Balita, PAUD, TK/RA, SD kelas 1-3
  MIDDAY // Siang (10:00) - SD kelas 4-6, SMP, SMA, ibu hamil & menyusui
}

enum BanperRequestStatus {
  DRAFT // Draft
  SUBMITTED // Diajukan
  REVIEWED // Direview
  APPROVED // Disetujui
  DISBURSED // Dicairkan
  REJECTED // Ditolak
}

enum ReportType {
  DAILY_OPERATIONAL // Laporan Operasional Harian
  FINANCIAL_BIWEEKLY // Laporan Keuangan 2 Minggu
  BENEFICIARY_RECEIPT // Laporan Tanda Terima
  QUALITY_CONTROL // Laporan Quality Control
  DISTRIBUTION_SUMMARY // Laporan Distribusi
  MONTHLY_EVALUATION // Evaluasi Bulanan
}

enum ReceiptStatus {
  PENDING // Menunggu
  RECEIVED // Diterima
  LOST // Hilang
  DISPUTED // Bermasalah
}

enum SppgRole {
  KEPALA_SPPG // Kepala SPPG
  AHLI_GIZI // Ahli Gizi
  AKUNTAN // Akuntan
  PENGAWAS_DISTRIBUSI // Pengawas Pemeliharaan & Distribusi
  TIM_PERSIAPAN // Tim Persiapan (4 orang)
  TIM_PENGOLAHAN // Tim Pengolahan (10 orang)
  TIM_PEMORSIAN // Tim Pemorsian (9 orang)
  TIM_PACKING // Tim Packing (1 orang)
  TIM_DISTRIBUSI // Tim Distribusi (4 orang)
  TIM_KEBERSIHAN // Tim Kebersihan (2 orang)
  TIM_PENCUCI // Tim Pencuci Alat Makan (16 orang)
}

enum BeneficiaryCategory {
  TODDLER // Toddler (6-59 months)
  EARLY_CHILDHOOD // Early Childhood Education
  KINDERGARTEN // Kindergarten
  ELEMENTARY_GRADE_1_3 // Elementary Grade 1-3
  ELEMENTARY_GRADE_4_6 // Elementary Grade 4-6
  JUNIOR_HIGH // Junior High School
  SENIOR_HIGH // Senior High School
  PREGNANT_WOMAN // Pregnant Woman
  BREASTFEEDING_MOTHER // Breastfeeding Mother
}

// === Equipment & Infrastructure Enums ===
enum EquipmentCategory {
  GAS_STOVE
  ELECTRIC_STOVE
  REFRIGERATOR
  FREEZER
  MIXER
  BLENDER
  RICE_COOKER
  PRESSURE_COOKER
  OVEN
  STEAMER
  CUTTING_BOARD
  KNIVES_SET
  SCALES
  GENERATOR
  WATER_PURIFIER
  PACKAGING_MACHINE
}

enum EquipmentCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  BROKEN
}

enum EquipmentStatus {
  ACTIVE
  MAINTENANCE
  RETIRED
  ON_LOAN
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  EMERGENCY
  CALIBRATION
  REPLACEMENT
}

enum WaterQualityStatus {
  EXCELLENT
  GOOD
  NEEDS_TREATMENT
  FAILED
}

enum InternetStatus {
  ACTIVE
  DOWN
  SLOW
  MAINTENANCE
}

// === Quality Control Enums ===
enum TestType {
  WATER_QUALITY
  FOOD_SAMPLE
  NUTRITION_ANALYSIS
  MICROBIOLOGICAL
  CHEMICAL_RESIDUE
  HEAVY_METALS
}

enum TestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  RETESTING
  CANCELLED
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  REVOKED
  RENEWAL_PENDING
}

// === Research & Development Enums ===
enum ResearchType {
  NUTRITION_OPTIMIZATION
  LOCAL_INGREDIENT
  COST_EFFICIENCY
  TASTE_IMPROVEMENT
  CULTURAL_ADAPTATION
}

enum ResearchStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum SeasonAvailability {
  YEAR_ROUND
  DRY_SEASON
  RAINY_SEASON
  HARVEST_SEASON
}

enum AvailabilityStatus {
  ABUNDANT
  MODERATE
  SCARCE
  SEASONAL
  RARE
}

enum UsageFrequency {
  DAILY
  WEEKLY
  MONTHLY
  SEASONAL
  OCCASIONAL
}

// === Nutrition Services Enums ===
enum ConsultationType {
  INDIVIDUAL
  GROUP
  COMMUNITY
  SCHOOL_ASSESSMENT
  HOME_VISIT
}

enum SpecialCondition {
  PREGNANT
  LACTATING
  DIABETES
  HYPERTENSION
  ANEMIA
  MALNUTRITION
  FOOD_ALLERGY
}

enum BeneficiaryNutritionStatus {
  NORMAL
  UNDERWEIGHT
  OVERWEIGHT
  STUNTED
  WASTED
  OBESE
}

enum EducationTarget {
  PARENTS
  TEACHERS
  COMMUNITY_LEADERS
  HEALTH_WORKERS
  STUDENTS
}

// === Production Optimization Enums ===
enum OptimizationMetric {
  COST
  TIME
  QUALITY
  WASTE_REDUCTION
  NUTRITION_DENSITY
  ENERGY_EFFICIENCY
}

enum WasteType {
  FOOD_WASTE
  PACKAGING_WASTE
  ORGANIC_WASTE
  INORGANIC_WASTE
  COOKING_OIL
}

enum WasteSource {
  PREPARATION
  COOKING
  PACKAGING
  LEFTOVER
  EXPIRED_INGREDIENTS
  QUALITY_REJECTION
}

enum DisposalMethod {
  RECYCLE
  COMPOST
  LANDFILL
  DONATE
  BIOGAS
  ANIMAL_FEED
}

// === Advanced Analytics Enums ===
enum AnalyticsType {
  COST_ANALYSIS
  EFFICIENCY_ANALYSIS
  QUALITY_TRENDS
  NUTRITION_COMPLIANCE
  WASTE_ANALYSIS
  BENEFICIARY_SATISFACTION
}

enum TrendDirection {
  INCREASING
  DECREASING
  STABLE
  VOLATILE
}

enum BenchmarkType {
  REGIONAL
  NATIONAL
  SIMILAR_SIZE
  BEST_PRACTICE
}

// === User Management & Access Control Enums ===
enum UserRole {
  // Platform Level
  PLATFORM_SUPERADMIN // Full platform access
  PLATFORM_SUPPORT // Customer support access
  PLATFORM_ANALYST // Analytics & reporting access

  // SPPG Level - Management
  SPPG_KEPALA // Kepala SPPG - Full SPPG access
  SPPG_ADMIN // SPPG Administrator

  // SPPG Level - Operational
  SPPG_AHLI_GIZI // Ahli Gizi - Menu & nutrition access
  SPPG_AKUNTAN // Akuntan - Financial access
  SPPG_PRODUKSI_MANAGER // Manager Produksi - Production access
  SPPG_DISTRIBUSI_MANAGER // Manager Distribusi - Distribution access
  SPPG_HRD_MANAGER // HRD Manager - HR access

  // SPPG Level - Staff
  SPPG_STAFF_DAPUR // Staff Dapur
  SPPG_STAFF_DISTRIBUSI // Staff Distribusi
  SPPG_STAFF_ADMIN // Staff Administrasi
  SPPG_STAFF_QC // Staff Quality Control

  // Limited Access
  SPPG_VIEWER // Read-only access
  DEMO_USER // Demo access (limited time & features)
}

enum PermissionType {
  // Core Permissions
  READ // Read access
  WRITE // Write access
  DELETE // Delete access
  APPROVE // Approval access

  // Administrative
  USER_MANAGE // Manage users
  ROLE_ASSIGN // Assign roles
  SETTINGS_MANAGE // Manage settings

  // Operational
  MENU_MANAGE // Menu management
  PROCUREMENT_MANAGE // Procurement management
  PRODUCTION_MANAGE // Production management
  DISTRIBUTION_MANAGE // Distribution management
  QUALITY_MANAGE // Quality control
  FINANCIAL_MANAGE // Financial management
  HR_MANAGE // HR management

  // Analytics & Reporting
  REPORTS_VIEW // View reports
  REPORTS_GENERATE // Generate reports
  ANALYTICS_VIEW // View analytics
  ANALYTICS_ADVANCED // Advanced analytics

  // System
  SYSTEM_CONFIG // System configuration
  DATA_EXPORT // Data export
  DATA_IMPORT // Data import
  AUDIT_LOG_VIEW // View audit logs
}

enum UserDemoStatus {
  REQUESTED // Demo requested
  SCHEDULED // Demo scheduled
  IN_PROGRESS // Demo in progress
  COMPLETED // Demo completed
  CONVERTED // Converted to customer
  EXPIRED // Demo expired
  CANCELLED // Demo cancelled
}

enum AccessLevel {
  FULL // Full access to module
  LIMITED // Limited access
  READ_ONLY // Read-only access
  NO_ACCESS // No access
}

// ================================ CORE MODELS ================================

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  password     String?
  name         String
  phone        String?
  profileImage String?

  // User Classification
  userType UserType  @default(SPPG_USER)
  userRole UserRole?
  sppgId   String?

  // Account Status
  emailVerified DateTime?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?

  // Security & Access
  twoFactorEnabled    Boolean   @default(false)
  twoFactorSecret     String?
  lastPasswordChange  DateTime?
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?

  // Profile Information
  firstName  String?
  lastName   String?
  jobTitle   String?
  department String?
  location   String?
  timezone   String  @default("Asia/Jakarta")
  language   String  @default("id")

  // Contact & Emergency
  emergencyContact String?
  emergencyPhone   String?
  address          String?

  // Demo & Trial Management
  demoStatus     UserDemoStatus?
  demoExpiresAt  DateTime?
  demoStartedAt  DateTime?
  trialExpiresAt DateTime?

  // Platform Access Tracking
  platformAccess   Json? // Track which platform features accessed
  lastActiveModule String? // Last accessed module
  sessionCount     Int     @default(0)

  // Relations
  sppg SPPG? @relation(fields: [sppgId], references: [id], onDelete: SetNull)

  // Access Control Relations
  userPermissions UserPermission[]
  userSessions    UserSession[]

  // SaaS Platform Relations
  notifications Notification[]
  employee      Employee? // HRD relation

  // Audit & Activity
  auditLogs    UserAuditLog[]
  activityLogs UserActivity[]

  // Onboarding
  onboarding UserOnboarding?

  // Marketing Relations
  blogPosts BlogPost[]

  // Platform Management Relations
  featureUsages FeatureUsage[]

  // Menu Planning Relations
  menuPlansCreated          MenuPlan[]         @relation("MenuPlanCreator")
  menuPlansApproved         MenuPlan[]         @relation("MenuPlanApprover")
  menuPlanTemplatesCreated  MenuPlanTemplate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userType, userRole])
  @@index([sppgId, isActive])
  @@index([demoStatus, demoExpiresAt])
  @@map("users")
}

model SPPG {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?

  // NEW: Structured Address with Regional Master Data
  addressDetail String // "Jl. Merdeka No. 123, RT 01 RW 02"
  provinceId    String
  regencyId     String
  districtId    String
  villageId     String
  postalCode    String?
  coordinates   String? // GPS coordinates (latitude,longitude)

  phone String
  email String

  // Person in Charge Information
  picName     String
  picPosition String
  picEmail    String
  picPhone    String
  picWhatsapp String?

  // Organization Details
  organizationType OrganizationType
  establishedYear  Int?

  targetRecipients   Int
  maxRadius          Float
  maxTravelTime      Int
  operationStartDate DateTime
  operationEndDate   DateTime?
  status             SppgStatus @default(ACTIVE)

  // Demo Account Fields
  isDemoAccount        Boolean   @default(false)
  demoExpiresAt        DateTime? // Kapan demo expires
  demoStartedAt        DateTime? // Kapan demo dimulai
  demoParentId         String? // Jika convert, link ke production account
  demoMaxBeneficiaries Int? // Limit penerima manfaat untuk demo
  demoAllowedFeatures  String[] // Fitur yang boleh diakses

  // Relations
  users        User[]
  subscription Subscription?
  invoices     Invoice[]
  payments     Payment[]

  // NEW: Regional Master Data Relations
  province Province @relation("SppgProvince", fields: [provinceId], references: [id])
  regency  Regency  @relation("SppgRegency", fields: [regencyId], references: [id])
  district District @relation("SppgDistrict", fields: [districtId], references: [id])
  village  Village  @relation("SppgVillage", fields: [villageId], references: [id])

  // SaaS Management Relations
  usageTracking       UsageTracking[]
  subscriptionChanges SubscriptionChange[]
  trialSubscription   TrialSubscription?
  billingCycles       BillingCycle[]
  paymentMethods      PaymentMethod[]
  dunningProcesses    DunningProcess[]
  healthScore         CustomerHealthScore?

  // New Critical Relations for SaaS Platform
  supportTickets SupportTicket[]
  notifications  Notification[]

  // SPPG Operational Relations
  nutritionPrograms NutritionProgram[]
  inventoryItems    InventoryItem[]
  procurementPlans  ProcurementPlan[]
  procurements      Procurement[]
  foodProductions   FoodProduction[]
  foodDistributions FoodDistribution[]

  // HRD Management Relations
  departments   Department[]
  positions     Position[]
  employees     Employee[]
  workSchedules WorkSchedule[]
  trainings     Training[]

  // SPPG Operational Relations (SK 63/2025)
  virtualAccount        SppgVirtualAccount?
  banperRequests        BanperRequest[]
  banperTransactions    BanperTransaction[]
  teamMembers           SppgTeamMember[]
  distributionSchedules DistributionSchedule[]
  beneficiaryReceipts   BeneficiaryReceipt[]
  operationalReports    SppgOperationalReport[]

  // Equipment & Infrastructure Relations (100% Coverage)
  kitchenEquipment  KitchenEquipment[]
  utilityMonitoring UtilityMonitoring[]

  // Advanced Quality Control Relations (100% Coverage)
  laboratoryTests          LaboratoryTest[]
  foodSafetyCertifications FoodSafetyCertification[]
  dailyFoodSamples         DailyFoodSample[]

  // Menu Research & Development Relations (100% Coverage)
  menuResearch         MenuResearch[]
  localFoodAdaptations LocalFoodAdaptation[]

  // Enhanced Nutrition Services Relations (100% Coverage)
  nutritionConsultations NutritionConsultation[]
  nutritionEducation     NutritionEducation[]

  // Production Optimization Relations (100% Coverage)
  productionOptimizations ProductionOptimization[]
  wasteManagement         WasteManagement[]

  // Advanced Analytics Relations (100% Coverage)
  performanceAnalytics PerformanceAnalytics[]
  sppgBenchmarking     SppgBenchmarking[]

  // Demo Relations
  demoRequests      DemoRequest[]  @relation("DemoSppg")
  convertedFromDemo DemoRequest[]  @relation("ConvertedSppg")
  demoAnalytics     DemoAnalytics?

  // Marketing Relations
  testimonials Testimonial[]
  caseStudies  CaseStudy[]
  leadCaptures LeadCapture[]

  // Platform Management Relations
  featureUsages FeatureUsage[]

  // Budget Configuration (Enterprise Feature)
  monthlyBudget        Float?    @default(50000000) // Default 50M IDR per month
  yearlyBudget         Float? // If set, overrides monthly calculation
  budgetStartDate      DateTime? @default(now()) // Budget period start
  budgetEndDate        DateTime? // Budget period end
  budgetCurrency       String    @default("IDR") // Currency code
  budgetAllocation     Json? // Category-wise budget allocation {"protein": 30, "carbs": 25, "vegetables": 25, "fruits": 20}
  budgetAutoReset      Boolean   @default(true) // Auto reset monthly budget
  budgetAlertThreshold Float     @default(80) // Alert when 80% budget used

  // Budget Tracking Relations
  budgetTracking BudgetTracking[] @relation("SppgBudgetTracking")

  // Feedback System Relations
  beneficiaryFeedback BeneficiaryFeedback[]
  feedbackSummaries   FeedbackSummary[]

  // Menu Planning Relations
  menuPlans          MenuPlan[]         @relation("MenuPlanSppg")
  menuPlanTemplates  MenuPlanTemplate[] @relation("MenuPlanTemplateSppg")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sppg")
}

model Subscription {
  id     String @id @default(cuid())
  sppgId String @unique

  // Subscription Details
  tier   SubscriptionTier
  status SubscriptionStatus @default(ACTIVE)

  // Billing Dates
  startDate   DateTime  @default(now())
  endDate     DateTime?
  billingDate DateTime

  // Current Usage Limits  
  maxRecipients         Int // Maksimal penerima
  maxStaff              Int // Maksimal staff
  maxDistributionPoints Int // Maksimal titik distribusi
  storageGb             Int // Storage dalam GB

  // Package Reference
  packageId String?

  // Relations
  sppg               SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  package            SubscriptionPackage? @relation(fields: [packageId], references: [id])
  changes            SubscriptionChange[]
  billingCycles      BillingCycle[]
  revenueRecognition RevenueRecognition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// Budget Tracking Model for Real-time Budget Management
model BudgetTracking {
  id     String @id @default(cuid())
  sppgId String
  month  Int // 1-12
  year   Int // e.g., 2025

  // Budget Amounts
  allocatedBudget Float // Monthly allocated budget
  spentBudget     Float @default(0) // Actually spent amount
  remainingBudget Float @default(0) // Calculated remaining

  // Category Breakdown
  proteinSpent    Float @default(0)
  carbsSpent      Float @default(0)
  vegetablesSpent Float @default(0)
  fruitsSpent     Float @default(0)
  otherSpent      Float @default(0)

  // Performance Metrics
  utilizationRate    Float @default(0) // Percentage of budget used
  efficiencyScore    Float @default(0) // Cost per beneficiary efficiency
  costPerBeneficiary Float @default(0) // Average cost per beneficiary

  // Tracking Info
  lastCalculated DateTime @default(now())
  isActive       Boolean  @default(true)

  // Relations
  sppg SPPG @relation("SppgBudgetTracking", fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sppgId, month, year])
  @@map("budget_tracking")
}

model SubscriptionPackage {
  id String @id @default(cuid())

  // Package Information
  name        String           @unique
  displayName String
  description String
  tier        SubscriptionTier

  // Pricing
  monthlyPrice Float
  yearlyPrice  Float?
  setupFee     Float  @default(0)

  // Feature Limits
  maxRecipients         Int
  maxStaff              Int
  maxDistributionPoints Int
  maxMenusPerMonth      Int
  storageGb             Int
  maxReportsPerMonth    Int

  // Feature Flags
  hasAdvancedReporting Boolean @default(false)
  hasNutritionAnalysis Boolean @default(false)
  hasCostCalculation   Boolean @default(false)
  hasQualityControl    Boolean @default(false)
  hasAPIAccess         Boolean @default(false)
  hasCustomBranding    Boolean @default(false)
  hasPrioritySupport   Boolean @default(false)
  hasTrainingIncluded  Boolean @default(false)

  // Support & SLA
  supportLevel    String // "EMAIL", "CHAT", "PHONE", "DEDICATED"
  responseTimeSLA String? // "24 hours", "4 hours", "1 hour"

  // Availability
  isActive  Boolean @default(true)
  isPopular Boolean @default(false)
  isCustom  Boolean @default(false)

  // Demo Package Configuration
  isDemoPackage     Boolean @default(false)
  demoDuration      Int? // Duration in days
  demoMaxUsers      Int? // Max users for demo
  demoFeatureLimits Json? // Specific limits for demo

  // Relations
  subscriptions   Subscription[]
  packageFeatures SubscriptionPackageFeature[]
  changesFrom     SubscriptionChange[]         @relation("ChangeFromPackage")
  changesTo       SubscriptionChange[]         @relation("ChangeToPackage")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tier, isActive])
  @@map("subscription_packages")
}

model SubscriptionPackageFeature {
  id        String @id @default(cuid())
  packageId String

  // Feature Information
  featureName  String
  featureValue String
  isHighlight  Boolean @default(false)
  category     String?

  // Display
  displayOrder Int     @default(0)
  description  String?

  package SubscriptionPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId, displayOrder])
  @@map("subscription_package_features")
}

model Invoice {
  id            String @id @default(cuid())
  sppgId        String
  invoiceNumber String @unique
  period        String

  // Billing Details
  baseAmount  Float
  tax         Float @default(0)
  discount    Float @default(0)
  totalAmount Float

  // Status & Dates
  status      PaymentStatus @default(PENDING)
  invoiceDate DateTime      @default(now())
  dueDate     DateTime
  paidDate    DateTime?

  // Relations
  sppg               SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  payments           Payment[]
  billingCycles      BillingCycle[]
  dunningProcesses   DunningProcess[]
  revenueRecognition RevenueRecognition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, period])
  @@index([status, dueDate])
  @@map("invoices")
}

model Payment {
  id String @id @default(cuid())

  // Payment Details
  paymentNumber String @unique
  invoiceId     String
  sppgId        String
  amount        Float

  // Payment Information
  paymentMethod   String
  paymentProvider String?
  paymentDate     DateTime?

  // Transaction Details
  status          PaymentStatus @default(PENDING)
  referenceNumber String?
  transactionId   String?

  // Relations
  invoice           Invoice        @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  sppg              SPPG           @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  paymentMethodId   String?
  paymentMethodUsed PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, status])
  @@index([invoiceId])
  @@index([paymentDate])
  @@map("payments")
}

// ================================ SAAS SUBSCRIPTION MANAGEMENT MODELS ================================

// === Usage Tracking & Quotas ===
model UsageTracking {
  id           String            @id @default(cuid())
  sppgId       String
  resourceType UsageResourceType
  period       String // "2025-01" format

  // Usage Details
  currentUsage   Int     @default(0)
  maxAllowed     Int
  percentageUsed Float   @default(0)
  isOverQuota    Boolean @default(false)

  // Warning thresholds
  warningAt80Sent  Boolean @default(false)
  warningAt90Sent  Boolean @default(false)
  warningAt100Sent Boolean @default(false)

  // Overage
  overageUnits  Int    @default(0)
  overageRate   Float? // Cost per overage unit
  overageAmount Float  @default(0)

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())

  @@unique([sppgId, resourceType, period])
  @@index([sppgId, period])
  @@index([resourceType, isOverQuota])
  @@map("usage_tracking")
}

// === Subscription Changes & History ===
model SubscriptionChange {
  id             String                 @id @default(cuid())
  sppgId         String
  subscriptionId String
  changeType     SubscriptionChangeType

  // From/To Details
  fromTier      SubscriptionTier?
  toTier        SubscriptionTier?
  fromPackageId String?
  toPackageId   String?

  // Pricing Changes
  oldMonthlyPrice Float?
  newMonthlyPrice Float?
  oldYearlyPrice  Float?
  newYearlyPrice  Float?
  proratedAmount  Float? // Pro-rated adjustment
  proratedCredit  Float? // Credit for remaining period

  // Timing
  requestedDate DateTime  @default(now())
  effectiveDate DateTime
  processedAt   DateTime?

  // Authorization
  requestedBy String // User ID
  approvedBy  String? // SuperAdmin ID
  processedBy String? // SuperAdmin ID who processed

  // Status & Reason
  status     String  @default("PENDING") // PENDING, APPROVED, PROCESSING, COMPLETED, CANCELLED, REJECTED
  reason     String?
  notes      String?
  adminNotes String? // Internal admin notes

  // Cancellation specific
  cancellationReason String? // "COST", "FEATURES", "SUPPORT", "COMPETITOR", "OTHER"
  retentionOffered   Boolean @default(false)
  retentionAccepted  Boolean @default(false)

  // Relations
  sppg         SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  subscription Subscription         @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  fromPackage  SubscriptionPackage? @relation("ChangeFromPackage", fields: [fromPackageId], references: [id])
  toPackage    SubscriptionPackage? @relation("ChangeToPackage", fields: [toPackageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, status])
  @@index([changeType, status])
  @@index([effectiveDate])
  @@map("subscription_changes")
}

// === Trial Management ===
model TrialSubscription {
  id     String @id @default(cuid())
  sppgId String @unique

  // Trial Details
  trialTier     SubscriptionTier @default(STANDARD)
  trialDays     Int              @default(14)
  startDate     DateTime         @default(now())
  endDate       DateTime
  daysRemaining Int

  // Extensions
  isExtended      Boolean   @default(false)
  extensionDays   Int?
  extensionReason String?
  extendedBy      String? // SuperAdmin User ID
  extendedAt      DateTime?

  // Conversion tracking
  isConverted     Boolean           @default(false)
  convertedAt     DateTime?
  convertedToTier SubscriptionTier?
  conversionValue Float? // Revenue from conversion

  // Experience tracking
  onboardingCompleted Boolean @default(false)
  firstMenuCreated    Boolean @default(false)
  firstDeliveryMade   Boolean @default(false)
  supportTicketsCount Int     @default(0)

  // Notifications sent
  welcomeSent             Boolean @default(false)
  reminder7DaysSent       Boolean @default(false)
  reminder3DaysSent       Boolean @default(false)
  reminder1DaySent        Boolean @default(false)
  expiredNotificationSent Boolean @default(false)

  // Feedback
  exitFeedback String?
  exitReason   String? // "CONVERTED", "TOO_EXPENSIVE", "MISSING_FEATURES", "TOO_COMPLEX", "OTHER"
  npsScore     Int? // 1-10 Net Promoter Score

  // Relations
  sppg          SPPG                @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  notifications TrialNotification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([endDate, isConverted])
  @@index([trialTier, isConverted])
  @@map("trial_subscriptions")
}

model TrialNotification {
  id               String                @id @default(cuid())
  trialId          String
  notificationType TrialNotificationType

  // Notification Details
  sentAt      DateTime  @default(now())
  channel     String // "EMAIL", "IN_APP", "SMS"
  isDelivered Boolean   @default(true)
  clickedAt   DateTime?

  // Relations
  trial TrialSubscription @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId, notificationType])
  @@map("trial_notifications")
}

// === Billing Cycles & Automated Billing ===
model BillingCycle {
  id             String @id @default(cuid())
  sppgId         String
  subscriptionId String

  // Cycle Information  
  billingPeriod  BillingFrequency @default(MONTHLY)
  cycleNumber    Int // Sequential cycle number
  cycleStartDate DateTime
  cycleEndDate   DateTime

  // Usage period (might be different from billing period)
  usageStartDate DateTime
  usageEndDate   DateTime

  // Billing Details
  baseAmount     Float
  usageCharges   Float @default(0) // Overage charges
  discountAmount Float @default(0)
  taxAmount      Float @default(0)
  totalAmount    Float

  // Proration (for mid-cycle changes)
  isProrated     Boolean @default(false)
  proratedDays   Int?
  proratedAmount Float?

  // Status
  status           BillingCycleStatus @default(PENDING)
  invoiceGenerated Boolean            @default(false)
  invoiceId        String?

  // Next billing
  nextBillingDate DateTime
  isAutoRenewal   Boolean  @default(true)

  // Metadata
  billingNotes String?

  // Relations
  sppg               SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  subscription       Subscription         @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  invoice            Invoice?             @relation(fields: [invoiceId], references: [id])
  revenueRecognition RevenueRecognition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sppgId, cycleNumber])
  @@index([status, nextBillingDate])
  @@index([sppgId, billingPeriod])
  @@map("billing_cycles")
}

// === Payment Methods & Auto-billing ===
model PaymentMethod {
  id     String @id @default(cuid())
  sppgId String

  // Payment Method Details
  type     PaymentMethodType
  provider String // "MIDTRANS", "XENDIT", "STRIPE", "MANUAL"

  // Display Information
  displayName  String // "Visa ending in 1234"
  maskedNumber String? // "**** **** **** 1234"

  // Card Details (encrypted/tokenized)
  expiryMonth Int?
  expiryYear  Int?
  holderName  String?
  cardBrand   String? // "VISA", "MASTERCARD", "AMEX"

  // Bank Transfer Details
  bankCode      String?
  bankName      String?
  accountNumber String?
  accountName   String?

  // E-Wallet Details
  walletProvider String? // "GOPAY", "OVO", "DANA", "SHOPEEPAY"
  walletNumber   String?

  // Gateway Integration
  gatewayToken      String? // Payment gateway token
  gatewayCustomerId String? // Gateway customer ID

  // Status
  isActive   Boolean   @default(true)
  isDefault  Boolean   @default(false)
  isVerified Boolean   @default(false)
  verifiedAt DateTime?

  // Usage Statistics
  successfulPayments Int       @default(0)
  failedPayments     Int       @default(0)
  lastUsedAt         DateTime?

  // Relations
  sppg     SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, isDefault])
  @@index([sppgId, isActive])
  @@map("payment_methods")
}

// === Dunning Management ===
model DunningProcess {
  id        String @id @default(cuid())
  sppgId    String
  invoiceId String

  // Dunning Details
  currentStage DunningStage @default(FIRST_REMINDER)
  status       String       @default("ACTIVE") // ACTIVE, PAUSED, RESOLVED, FAILED, ESCALATED

  // Progress tracking
  stagesCompleted DunningStage[]
  remindersSent   Int            @default(0)
  lastActionDate  DateTime?
  nextActionDate  DateTime?

  // Escalation
  isEscalated      Boolean   @default(false)
  escalatedAt      DateTime?
  escalatedTo      String? // SuperAdmin User ID
  escalationReason String?

  // Suspension tracking
  suspensionWarningDate DateTime?
  suspendedAt           DateTime?
  isSuspended           Boolean   @default(false)

  // Resolution
  resolvedAt      DateTime?
  resolutionType  String? // "PAYMENT_RECEIVED", "MANUALLY_RESOLVED", "WRITTEN_OFF", "ACCOUNT_CLOSED"
  resolutionNotes String?
  resolvedBy      String? // User ID who resolved

  // Customer Interaction
  lastContactDate  DateTime?
  customerResponse String? // Customer's response to dunning
  promiseToPayDate DateTime?

  // Relations
  sppg           SPPG            @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  invoice        Invoice         @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  dunningActions DunningAction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, status])
  @@index([currentStage, nextActionDate])
  @@index([isSuspended])
  @@map("dunning_processes")
}

model DunningAction {
  id               String @id @default(cuid())
  dunningProcessId String

  // Action Details
  stage      DunningStage
  actionType String // "EMAIL_SENT", "SMS_SENT", "CALL_MADE", "ACCOUNT_SUSPENDED", "MANUAL_CONTACT"
  actionDate DateTime     @default(now())

  // Communication Details
  recipientEmail String?
  recipientPhone String?
  messageSubject String?
  messageContent String?

  // Delivery Status
  isDelivered Boolean   @default(false)
  deliveredAt DateTime?
  isOpened    Boolean   @default(false)
  openedAt    DateTime?
  isClicked   Boolean   @default(false)
  clickedAt   DateTime?

  // Response tracking
  customerResponded Boolean   @default(false)
  responseDate      DateTime?
  responseContent   String?

  // Outcome
  wasEffective       Boolean?
  effectivenessNotes String?

  // Relations
  dunningProcess DunningProcess @relation(fields: [dunningProcessId], references: [id], onDelete: Cascade)

  @@index([dunningProcessId, actionDate])
  @@index([stage, actionType])
  @@map("dunning_actions")
}

// === Revenue Recognition ===
model RevenueRecognition {
  id             String  @id @default(cuid())
  subscriptionId String
  invoiceId      String?
  billingCycleId String?

  // Revenue Details
  totalRevenue      Float
  recognizedRevenue Float @default(0)
  deferredRevenue   Float
  remainingRevenue  Float

  // Recognition Period
  recognitionStartDate DateTime
  recognitionEndDate   DateTime
  recognitionDays      Int

  // Schedule
  monthlyAmount Float
  isCompleted   Boolean   @default(false)
  completedAt   DateTime?

  // Accounting
  accountingPeriod String? // "2025-Q1"
  journalEntryId   String? // Reference to accounting system

  // Relations
  subscription  Subscription          @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  invoice       Invoice?              @relation(fields: [invoiceId], references: [id])
  billingCycle  BillingCycle?         @relation(fields: [billingCycleId], references: [id])
  scheduleItems RevenueScheduleItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subscriptionId, recognitionStartDate])
  @@index([accountingPeriod])
  @@map("revenue_recognition")
}

model RevenueScheduleItem {
  id                   String @id @default(cuid())
  revenueRecognitionId String

  // Schedule Details
  scheduleDate    DateTime  @db.Date
  scheduledAmount Float
  isRecognized    Boolean   @default(false)
  recognizedAt    DateTime?

  // Accounting Period
  accountingMonth   String // "2025-01"
  accountingQuarter String // "2025-Q1"

  // Relations
  revenueRecognition RevenueRecognition @relation(fields: [revenueRecognitionId], references: [id], onDelete: Cascade)

  @@index([revenueRecognitionId, scheduleDate])
  @@index([accountingMonth])
  @@map("revenue_schedule_items")
}

// === Subscription Analytics ===
model SubscriptionMetrics {
  id String @id @default(cuid())

  // Period
  period       String // "2025-01"
  periodType   String   @default("MONTHLY") // "MONTHLY", "QUARTERLY", "YEARLY"
  calculatedAt DateTime @default(now())

  // Subscription Metrics
  totalActiveSubscriptions Int @default(0)
  newSubscriptions         Int @default(0)
  churnedSubscriptions     Int @default(0)
  reactivatedSubscriptions Int @default(0)
  upgrades                 Int @default(0)
  downgrades               Int @default(0)

  // Trial Metrics
  trialSignups        Int   @default(0)
  trialConversions    Int   @default(0)
  trialConversionRate Float @default(0)
  trialExtensions     Int   @default(0)

  // Revenue Metrics
  monthlyRecurringRevenue  Float @default(0)
  annualRecurringRevenue   Float @default(0)
  averageRevenuePerUser    Float @default(0)
  averageRevenuePerAccount Float @default(0)

  // Growth Metrics
  mrrGrowthRate      Float @default(0) // Month-over-month MRR growth
  customerGrowthRate Float @default(0)
  churnRate          Float @default(0)
  retentionRate      Float @default(0)

  // Lifetime Value
  customerLifetimeValue Float @default(0)
  paybackPeriod         Float @default(0) // Months

  // Tier Distribution
  basicTierCount      Int @default(0)
  standardTierCount   Int @default(0)
  proTierCount        Int @default(0)
  enterpriseTierCount Int @default(0)

  // Payment Metrics
  successfulPaymentRate Float @default(0)
  averageDaysToPay      Float @default(0)
  overdueInvoicesCount  Int   @default(0)

  createdAt DateTime @default(now())

  @@unique([period, periodType])
  @@index([period])
  @@map("subscription_metrics")
}

// === Customer Health Score ===
model CustomerHealthScore {
  id     String @id @default(cuid())
  sppgId String

  // Overall Health Score (0-100)
  healthScore   Float
  scoreCategory String // "HEALTHY", "AT_RISK", "CRITICAL"

  // Component Scores
  usageScore      Float // Based on feature usage
  paymentScore    Float // Based on payment behavior  
  supportScore    Float // Based on support interactions
  engagementScore Float // Based on login frequency, feature adoption

  // Risk Indicators
  isAtRisk    Boolean  @default(false)
  riskFactors String[] // ["LOW_USAGE", "PAYMENT_DELAYS", "HIGH_SUPPORT_TICKETS"]
  riskLevel   String? // "LOW", "MEDIUM", "HIGH", "CRITICAL"

  // Predictions
  churnProbability     Float? // 0-100%
  expansionProbability Float? // Likelihood to upgrade

  // Action Items
  recommendedActions String[] // Suggested actions to improve health

  // Calculation Details
  calculationDate DateTime @default(now())
  nextCalculation DateTime

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sppgId])
  @@index([healthScore, scoreCategory])
  @@index([isAtRisk, riskLevel])
  @@map("customer_health_scores")
}

// ================================ PHASE 1 - CRITICAL SAAS MODELS ================================

// === Support System ===
model SupportTicket {
  id           String  @id @default(cuid())
  ticketNumber String  @unique
  sppgId       String
  reportedBy   String? // User ID

  // Ticket Details
  title       String
  description String
  priority    SupportTicketPriority @default(MEDIUM)
  status      SupportTicketStatus   @default(OPEN)
  category    SupportTicketCategory @default(GENERAL)

  // Assignment
  assignedTo String? // Support staff ID
  assignedAt DateTime?

  // Resolution
  resolvedAt DateTime?
  resolvedBy String? // Support staff ID
  resolution String?

  // Customer Satisfaction
  satisfactionRating   Int? // 1-5
  satisfactionFeedback String?

  // SLA Tracking
  responseTime   DateTime? // Time of first response
  resolutionTime DateTime? // Time of resolution
  slaBreached    Boolean   @default(false)

  // Relations
  sppg      SPPG                    @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  responses SupportTicketResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, status])
  @@index([status, priority])
  @@index([category, status])
  @@map("support_tickets")
}

model SupportTicketResponse {
  id       String @id @default(cuid())
  ticketId String

  // Response Details
  message    String
  isInternal Boolean @default(false) // Internal note vs customer-visible

  // Author
  authorId   String? // User ID
  authorName String
  authorType String  @default("SUPPORT") // "SUPPORT", "CUSTOMER", "SYSTEM"

  // Relations
  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([ticketId, createdAt])
  @@map("support_ticket_responses")
}

model KnowledgeBase {
  id String @id @default(cuid())

  // Article Details
  title   String
  slug    String  @unique
  content String
  summary String?

  // Organization
  category String
  tags     String[]

  // Publishing
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  publishedBy String? // User ID

  // Analytics
  viewCount      Int @default(0)
  helpfulCount   Int @default(0)
  unhelpfulCount Int @default(0)

  // SEO
  metaTitle       String?
  metaDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isPublished, category])
  @@index([tags])
  @@map("knowledge_base")
}

// === Notification System ===
model NotificationTemplate {
  id String @id @default(cuid())

  // Template Details  
  name    String           @unique
  title   String
  content String
  type    NotificationType

  // Variables
  variables Json? // Array of available variables

  // Channels
  emailEnabled Boolean @default(false)
  inAppEnabled Boolean @default(true)
  smsEnabled   Boolean @default(false)
  pushEnabled  Boolean @default(false)

  // Status
  isActive Boolean @default(true)

  // Relations
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type, isActive])
  @@map("notification_templates")
}

model Notification {
  id String @id @default(cuid())

  // Recipients
  userId String?
  sppgId String?

  // Content
  templateId String?
  title      String
  content    String
  type       NotificationType
  priority   NotificationPriority @default(NORMAL)

  // Delivery
  channels String[] // ["EMAIL", "IN_APP", "SMS"]

  // Status
  isRead Boolean   @default(false)
  readAt DateTime?
  isSent Boolean   @default(false)
  sentAt DateTime?

  // Context
  entityType String? // "Invoice", "Subscription", "Ticket"
  entityId   String?
  actionUrl  String?

  // Relations
  user     User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  sppg     SPPG?                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  template NotificationTemplate? @relation(fields: [templateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isRead])
  @@index([sppgId, isRead])
  @@index([type, priority])
  @@map("notifications")
}

model EmailTemplate {
  id String @id @default(cuid())

  // Template Details
  name        String  @unique
  subject     String
  htmlContent String
  textContent String?

  // Categories
  category String // "BILLING", "MARKETING", "SUPPORT", "SYSTEM"

  // Variables
  variables Json? // Available template variables

  // Status
  isActive Boolean @default(true)

  // Relations
  emailLogs EmailLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category, isActive])
  @@map("email_templates")
}

model EmailLog {
  id String @id @default(cuid())

  // Email Details
  templateId String?
  toEmail    String
  fromEmail  String
  subject    String

  // Status
  status   String  @default("PENDING") // PENDING, SENT, DELIVERED, FAILED, BOUNCED
  provider String? // "SMTP", "SENDGRID", "MAILGUN"

  // Tracking
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  bouncedAt   DateTime?

  // Error Handling
  errorMessage String?
  retryCount   Int     @default(0)

  // Context
  entityType String? // "Invoice", "Trial", "Support"
  entityId   String?

  // Relations
  template EmailTemplate? @relation(fields: [templateId], references: [id])

  createdAt DateTime @default(now())

  @@index([toEmail, status])
  @@index([status, sentAt])
  @@map("email_logs")
}

// === Audit & Compliance System ===
model AuditLog {
  id String @id @default(cuid())

  // Entity Information
  entityType String // "User", "SPPG", "Subscription", "Invoice"
  entityId   String

  // Action Information
  action      AuditAction
  description String?
  oldValues   Json? // Previous values
  newValues   Json? // New values

  // User Context
  userId    String?
  userName  String?
  userEmail String?
  sppgId    String?

  // Request Context
  ipAddress     String?
  userAgent     String?
  requestPath   String?
  requestMethod String?

  // Metadata
  metadata Json?

  createdAt DateTime @default(now())

  @@index([entityType, entityId])
  @@index([userId, createdAt])
  @@index([sppgId, createdAt])
  @@index([action, createdAt])
  @@map("audit_logs")
}

// SystemLog model dihapus - tidak diperlukan untuk fase operasional SPPG

// === API Management dihapus - tidak diperlukan untuk fase operasional ===

// === Webhook models dihapus - tidak diperlukan untuk fase operasional ===

// ================================ SPPG OPERATIONAL MODELS ================================

// === Inventory & Stock Management ===
model InventoryItem {
  id     String @id @default(cuid())
  sppgId String

  // Item Details
  itemName String
  itemCode String? // Kode item
  brand    String? // Merek
  category InventoryCategory
  unit     String // "kg", "liter", "pcs", "gram"

  // Stock Management
  currentStock    Float  @default(0)
  minStock        Float // Reorder point
  maxStock        Float // Maximum capacity
  reorderQuantity Float? // Jumlah pemesanan ulang

  // Cost Information
  lastPrice    Float?
  averagePrice Float? // Harga rata-rata

  // Supplier Information
  preferredSupplier String?
  supplierContact   String?
  leadTime          Int? // Waktu tunggu pengadaan (hari)

  // Storage Information
  storageLocation  String
  storageCondition String? // "ROOM_TEMP", "COOL", "FROZEN", "DRY"

  // Expiry Tracking
  hasExpiry Boolean @default(false)
  shelfLife Int? // Masa simpan (hari)

  // Nutrition Information (per 100g/100ml)
  calories      Float?
  protein       Float?
  carbohydrates Float?
  fat           Float?
  fiber         Float?

  // Status
  isActive Boolean @default(true)

  // Relations
  sppg             SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  stockMovements   StockMovement[]
  procurementItems ProcurementItem[]
  menuIngredients  MenuIngredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sppgId, itemCode])
  @@index([sppgId, category])
  @@index([category, isActive])
  @@index([currentStock])
  @@map("inventory_items")
}

model StockMovement {
  id          String @id @default(cuid())
  inventoryId String

  // Movement Details
  movementType MovementType
  quantity     Float
  unit         String

  // Before/After Stock
  stockBefore Float
  stockAfter  Float

  // Cost Information
  unitCost  Float?
  totalCost Float?

  // Reference Information
  referenceType   String? // "PROCUREMENT", "PRODUCTION", "ADJUSTMENT", "WASTE"
  referenceId     String?
  referenceNumber String? // Nomor dokumen referensi

  // Batch Information
  batchNumber String?
  expiryDate  DateTime?

  // Documentation
  notes       String?
  documentUrl String? // URL dokumen pendukung

  // Tracking
  movedBy    String // User ID
  movedAt    DateTime  @default(now())
  approvedBy String? // User ID yang approve
  approvedAt DateTime?

  // Relations
  inventory InventoryItem @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([inventoryId, movedAt])
  @@index([movementType, movedAt])
  @@index([referenceType, referenceId])
  @@map("stock_movements")
}

// === Procurement Management ===
model ProcurementPlan {
  id        String  @id @default(cuid())
  sppgId    String
  programId String?

  // Planning Period
  planName    String
  planMonth   String // "2024-10"
  planYear    Int
  planQuarter Int? // 1, 2, 3, 4

  // Budget Planning
  totalBudget     Float
  allocatedBudget Float @default(0)
  usedBudget      Float @default(0)
  remainingBudget Float @default(0)

  // Categories Budget
  proteinBudget   Float?
  carbBudget      Float?
  vegetableBudget Float?
  fruitBudget     Float?
  otherBudget     Float?

  // Targets
  targetRecipients Int
  targetMeals      Int // Total target meals untuk periode
  costPerMeal      Float? // Target cost per meal

  // Approval Workflow
  approvalStatus  String    @default("DRAFT") // "DRAFT", "SUBMITTED", "APPROVED", "REJECTED", "REVISION"
  submittedBy     String? // User ID
  submittedAt     DateTime?
  approvedBy      String? // User ID
  approvedAt      DateTime?
  rejectionReason String?

  // Planning Details
  notes           String?
  emergencyBuffer Float? // Buffer untuk kondisi darurat

  // Relations
  sppg         SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  program      NutritionProgram? @relation(fields: [programId], references: [id])
  procurements Procurement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, planMonth])
  @@index([approvalStatus])
  @@map("procurement_plans")
}

model Procurement {
  id     String  @id @default(cuid())
  sppgId String
  planId String?

  // Procurement Details
  procurementCode  String    @unique
  procurementDate  DateTime  @default(now())
  expectedDelivery DateTime?
  actualDelivery   DateTime?

  // Supplier Information
  supplierName    String
  supplierContact String?
  supplierAddress String?
  supplierEmail   String?
  supplierType    SupplierType? // Using enum

  // Purchase Information
  purchaseMethod ProcurementMethod // Using enum
  paymentTerms   String? // "CASH_ON_DELIVERY", "NET_30", "NET_15"

  // Financial
  subtotalAmount Float
  taxAmount      Float     @default(0)
  discountAmount Float     @default(0)
  shippingCost   Float     @default(0)
  totalAmount    Float
  paidAmount     Float     @default(0)
  paymentStatus  String    @default("UNPAID") // "UNPAID", "PARTIAL", "PAID", "OVERDUE"
  paymentDue     DateTime?

  // Status & Quality
  status         ProcurementStatus @default(DRAFT) // Using enum
  deliveryStatus String            @default("ORDERED") // "ORDERED", "CONFIRMED", "SHIPPED", "DELIVERED", "CANCELLED"
  qualityGrade   QualityGrade? // Using enum
  qualityNotes   String?

  // Documentation
  receiptNumber String?
  receiptPhoto  String? // URL foto nota
  deliveryPhoto String? // URL foto saat diterima
  invoiceNumber String?

  // Logistics
  deliveryMethod String? // "PICKUP", "DELIVERY", "SHIPPED"
  transportCost  Float?
  packagingType  String?

  // Quality Control
  inspectedBy      String? // User ID
  inspectedAt      DateTime?
  acceptanceStatus String? // "ACCEPTED", "REJECTED", "PARTIAL"
  rejectionReason  String?

  // Relations
  sppg  SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  plan  ProcurementPlan?  @relation(fields: [planId], references: [id])
  items ProcurementItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, procurementDate])
  @@index([paymentStatus, paymentDue])
  @@index([deliveryStatus])
  @@map("procurements")
}

model ProcurementItem {
  id              String  @id @default(cuid())
  procurementId   String
  inventoryItemId String?

  // Item Details
  itemName String
  itemCode String?
  category InventoryCategory
  brand    String?

  // Quantity & Units
  orderedQuantity  Float
  receivedQuantity Float?
  unit             String

  // Pricing
  pricePerUnit    Float
  totalPrice      Float
  discountPercent Float @default(0)
  discountAmount  Float @default(0)
  finalPrice      Float

  // Quality Specifications
  qualityStandard String? // Standar kualitas yang diminta
  qualityReceived String? // Kualitas yang diterima
  gradeRequested  String? // Grade yang diminta
  gradeReceived   String? // Grade yang diterima

  // Expiry & Storage
  expiryDate         DateTime?
  batchNumber        String?
  productionDate     DateTime?
  storageRequirement String? // Persyaratan penyimpanan

  // Acceptance
  isAccepted       Boolean @default(true)
  rejectionReason  String?
  returnedQuantity Float   @default(0)

  // Nutrition Information (opsional)
  caloriesPer100g Float?
  proteinPer100g  Float?
  fatPer100g      Float?
  carbsPer100g    Float?

  // Notes
  notes String?

  // Relations
  procurement   Procurement    @relation(fields: [procurementId], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem? @relation(fields: [inventoryItemId], references: [id])

  @@index([procurementId])
  @@index([category])
  @@map("procurement_items")
}

// === AKG (Angka Kebutuhan Gizi) Standards - Kemenkes 2019 ===
model NutritionRequirement {
  id String @id @default(cuid())

  // Target Group Classification
  ageGroupMin      Int // Umur minimum (bulan)
  ageGroupMax      Int // Umur maksimum (bulan)
  gender           String // "MALE", "FEMALE", "BOTH"
  activityLevel    String? // "LOW", "MODERATE", "HIGH"
  specialCondition String? // "PREGNANT", "LACTATING", "NORMAL"

  // Daily Requirements (AKG Kemenkes 2019)
  caloriesPerDay Float // Kalori per hari (kkal)
  proteinPerDay  Float // Protein (gram)
  fatPerDay      Float // Lemak (gram)
  carbsPerDay    Float // Karbohidrat (gram)
  fiberPerDay    Float // Serat (gram)

  // Vitamins (per day)
  vitaminAPerDay   Float? // Vitamin A (mcg RE)
  vitaminB1PerDay  Float? // Thiamin (mg)
  vitaminB2PerDay  Float? // Riboflavin (mg)
  vitaminB3PerDay  Float? // Niacin (mg)
  vitaminB6PerDay  Float? // Piridoksin (mg)
  vitaminB12PerDay Float? // Kobalamin (mcg)
  vitaminCPerDay   Float? // Vitamin C (mg)
  vitaminDPerDay   Float? // Vitamin D (mcg)
  vitaminEPerDay   Float? // Vitamin E (mg)
  vitaminKPerDay   Float? // Vitamin K (mcg)
  folatPerDay      Float? // Folat (mcg)

  // Minerals (per day)
  calciumPerDay    Float? // Kalsium (mg)
  phosphorusPerDay Float? // Fosfor (mg)
  ironPerDay       Float? // Zat Besi (mg)
  zincPerDay       Float? // Seng (mg)
  iodinePerDay     Float? // Iodium (mcg)
  seleniumPerDay   Float? // Selenium (mcg)
  magnesiumPerDay  Float? // Magnesium (mg)
  potassiumPerDay  Float? // Kalium (mg)
  sodiumPerDay     Float? // Natrium (mg)

  // Reference Information
  referenceSource  String  @default("KEMENKES_2019") // "KEMENKES_2019", "WHO_2020"
  applicableRegion String  @default("INDONESIA")
  referenceYear    Int     @default(2019)
  isActive         Boolean @default(true)
  notes            String?

  // Relations
  menuCalculations MenuNutritionCalculation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ageGroupMin, ageGroupMax, gender])
  @@index([isActive])
  @@map("nutrition_requirements")
}

// === School-Level Beneficiary Management ===
model SchoolBeneficiary {
  id        String @id @default(cuid())
  programId String

  // School Information
  schoolName   String
  schoolCode   String? // NPSN atau kode sekolah
  schoolType   String // "SD", "SMP", "SMA", "PAUD", "TK"
  schoolStatus String // "NEGERI", "SWASTA", "MADRASAH"

  // Contact Information
  principalName String
  contactPhone  String
  contactEmail  String?

  // NEW: Structured Address with Regional Master Data
  schoolAddress String // "Jl. Pendidikan No. 10"
  villageId     String
  postalCode    String?
  coordinates   String? // GPS coordinates

  // Student Population
  totalStudents  Int // Total siswa di sekolah
  targetStudents Int // Target penerima manfaat (misal 300)
  activeStudents Int @default(0) // Siswa aktif yang menerima saat ini

  // Age Group Distribution
  students4to6Years   Int @default(0) // PAUD/TK
  students7to12Years  Int @default(0) // SD
  students13to15Years Int @default(0) // SMP
  students16to18Years Int @default(0) // SMA

  // Program Schedule
  feedingDays Int[] // Hari pemberian makan [1,2,3,4,5]
  mealsPerDay Int     @default(1) // Berapa kali makan per hari
  feedingTime String? // Jam pemberian makan

  // Logistics & Infrastructure
  deliveryAddress      String
  deliveryContact      String
  deliveryInstructions String?
  storageCapacity      String? // Kapasitas penyimpanan sekolah
  servingMethod        String  @default("CAFETERIA") // "CAFETERIA", "CLASSROOM", "ASSEMBLY"
  hasKitchen           Boolean @default(false)
  hasStorage           Boolean @default(false)
  hasCleanWater        Boolean @default(true)
  hasElectricity       Boolean @default(true)

  // Program Status
  enrollmentDate   DateTime  @default(now())
  isActive         Boolean   @default(true)
  suspendedAt      DateTime?
  suspensionReason String?

  // Special Requirements
  beneficiaryType BeneficiaryType @default(CHILD) // Using enum
  specialDietary  String[] // Special dietary requirements
  allergyAlerts   String[] // Common allergies to avoid
  culturalReqs    String[] // Cultural/religious requirements

  // Relations
  program       NutritionProgram      @relation(fields: [programId], references: [id], onDelete: Cascade)
  distributions SchoolDistribution[]
  reports       SchoolFeedingReport[]
  feedback      BeneficiaryFeedback[]

  // NEW: Regional Master Data Relations
  village Village @relation("SchoolVillage", fields: [villageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([programId, isActive])
  @@index([schoolType, isActive])
  @@index([villageId])
  @@index([targetStudents])
  @@map("school_beneficiaries")
}

// === Produksi & Pengolahan Makanan ===
model FoodProduction {
  id        String @id @default(cuid())
  sppgId    String
  programId String
  menuId    String

  // Production Planning
  productionDate  DateTime
  batchNumber     String   @unique // Nomor batch produksi
  plannedPortions Int
  actualPortions  Int?

  // Staff Assignment
  headCook       String // User ID kepala koki
  assistantCooks String[] // Array User IDs asisten koki
  supervisorId   String? // User ID supervisor

  // Production Schedule
  plannedStartTime DateTime
  plannedEndTime   DateTime
  actualStartTime  DateTime?
  actualEndTime    DateTime?

  // Cost Tracking
  estimatedCost  Float
  actualCost     Float?
  costPerPortion Float?

  // Quality Parameters
  targetTemperature Float? // Suhu target saat selesai
  actualTemperature Float? // Suhu aktual
  hygieneScore      Int? // Skor kebersihan 1-100
  tasteRating       Int? // Rating rasa 1-5
  appearanceRating  Int? // Rating penampilan 1-5
  textureRating     Int? // Rating tekstur 1-5

  // Production Status
  status ProductionStatus @default(PLANNED)

  // Quality Control
  qualityPassed   Boolean?
  rejectionReason String?

  // Waste Management
  wasteAmount Float? // Jumlah limbah (kg)
  wasteNotes  String?

  // Documentation
  notes  String?
  photos String[] // URL foto produksi

  // Relations
  sppg          SPPG               @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  program       NutritionProgram   @relation(fields: [programId], references: [id], onDelete: Cascade)
  menu          NutritionMenu      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  qualityChecks QualityControl[]
  distributions FoodDistribution[]
  menuAssignments MenuAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, productionDate])
  @@index([programId, status])
  @@index([status, productionDate])
  @@map("food_productions")
}

model QualityControl {
  id           String @id @default(cuid())
  productionId String

  // Quality Check Details
  checkType String // "HYGIENE", "TEMPERATURE", "TASTE", "APPEARANCE", "SAFETY"
  checkTime DateTime @default(now())
  checkedBy String // User ID

  // Check Parameters
  parameter     String // Parameter yang dicek
  expectedValue String? // Nilai yang diharapkan
  actualValue   String // Nilai aktual

  // Results
  passed   Boolean
  score    Int? // Skor 1-100
  severity String? // "LOW", "MEDIUM", "HIGH", "CRITICAL"

  // Details
  notes           String?
  recommendations String?

  // Corrective Action
  actionRequired Boolean   @default(false)
  actionTaken    String?
  actionBy       String? // User ID yang melakukan tindakan
  actionDate     DateTime?

  // Follow-up
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?

  // Relations
  production FoodProduction @relation(fields: [productionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([productionId, checkType])
  @@index([checkType, passed])
  @@map("quality_controls")
}

// === Distribusi & Pengiriman Makanan ===
model FoodDistribution {
  id           String  @id @default(cuid())
  sppgId       String
  programId    String
  productionId String?

  // Distribution Details
  distributionDate DateTime
  distributionCode String   @unique // Kode distribusi
  mealType         MealType

  // Location Information
  distributionPoint String // Lokasi distribusi (nama sekolah/posyandu)
  address           String
  coordinates       String? // GPS coordinates

  // Planning
  plannedRecipients Int
  actualRecipients  Int?
  plannedStartTime  DateTime
  plannedEndTime    DateTime

  // Staff Assignment
  distributorId String // User ID kepala distribusi
  driverId      String? // User ID sopir
  volunteers    String[] // Array User IDs relawan

  // Logistics
  distributionMethod DistributionMethod? // Using enum
  vehicleType        String? // "MOTOR", "MOBIL", "TRUCK", "JALAN_KAKI"
  vehiclePlate       String? // Plat nomor kendaraan
  transportCost      Float?
  fuelCost           Float?
  otherCosts         Float?

  // Food Details
  menuItems     Json // Detail menu yang didistribusikan
  totalPortions Int
  portionSize   Float // Ukuran porsi (gram)

  // Temperature Tracking
  departureTemp Float? // Suhu saat berangkat
  arrivalTemp   Float? // Suhu saat tiba
  servingTemp   Float? // Suhu saat disajikan

  // Status Tracking
  status DistributionStatus @default(SCHEDULED)

  // Timing
  actualStartTime DateTime?
  actualEndTime   DateTime?
  departureTime   DateTime?
  arrivalTime     DateTime?
  completionTime  DateTime?

  // Quality Assessment
  foodQuality        QualityGrade? // Using enum
  hygieneScore       Int? // Skor kebersihan 1-100
  packagingCondition String? // "INTACT", "MINOR_DAMAGE", "MAJOR_DAMAGE"

  // Weather & Environment
  weatherCondition String? // Kondisi cuaca
  temperature      Float? // Suhu lingkungan
  humidity         Float? // Kelembaban

  // Documentation
  notes     String?
  photos    String[] // URL foto distribusi
  signature String? // Tanda tangan penerima

  // Relations
  sppg       SPPG                  @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  program    NutritionProgram      @relation(fields: [programId], references: [id], onDelete: Cascade)
  production FoodProduction?       @relation(fields: [productionId], references: [id])
  feedback   BeneficiaryFeedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, distributionDate])
  @@index([programId, status])
  @@index([status, distributionDate])
  @@index([distributionPoint])
  @@map("food_distributions")
}

// === Nutrition Calculation Engine ===
// ============================================================================
// SINGLE SOURCE OF TRUTH FOR NUTRITION DATA
// All nutrition values are calculated and stored here only
// NutritionMenu no longer stores redundant nutrition fields
// ============================================================================
model MenuNutritionCalculation {
  id            String  @id @default(cuid())
  menuId        String  @unique
  requirementId String? // AKG reference untuk age group

  // Calculated Nutritional Values (from ingredients)
  totalCalories Float @default(0) // Sum dari semua ingredient
  totalProtein  Float @default(0) // gram
  totalCarbs    Float @default(0) // gram
  totalFat      Float @default(0) // gram
  totalFiber    Float @default(0) // gram

  // Vitamins (calculated)
  totalVitaminA   Float @default(0) // mcg RE
  totalVitaminB1  Float @default(0) // mg
  totalVitaminB2  Float @default(0) // mg
  totalVitaminB3  Float @default(0) // mg
  totalVitaminB6  Float @default(0) // mg
  totalVitaminB12 Float @default(0) // mcg
  totalVitaminC   Float @default(0) // mg
  totalVitaminD   Float @default(0) // mcg
  totalVitaminE   Float @default(0) // mg
  totalVitaminK   Float @default(0) // mcg
  totalFolat      Float @default(0) // mcg

  // Minerals (calculated)
  totalCalcium    Float @default(0) // mg
  totalPhosphorus Float @default(0) // mg
  totalIron       Float @default(0) // mg
  totalZinc       Float @default(0) // mg
  totalIodine     Float @default(0) // mcg
  totalSelenium   Float @default(0) // mcg
  totalMagnesium  Float @default(0) // mg
  totalPotassium  Float @default(0) // mg
  totalSodium     Float @default(0) // mg

  // % Daily Value (compared to AKG)
  caloriesDV Float @default(0) // Percentage of Daily Value
  proteinDV  Float @default(0)
  carbsDV    Float @default(0)
  fatDV      Float @default(0)
  fiberDV    Float @default(0)

  // Adequacy Assessment
  meetsCalorieAKG Boolean @default(false) // Apakah memenuhi AKG kalori
  meetsProteinAKG Boolean @default(false) // Apakah memenuhi AKG protein
  meetsAKG        Boolean @default(false) // Overall AKG compliance

  // Nutrient Analysis
  excessNutrients    String[] // Nutrisi yang berlebih
  deficientNutrients String[] // Nutrisi yang kurang
  adequateNutrients  String[] // Nutrisi yang cukup

  // Calculation Metadata
  calculatedAt      DateTime @default(now())
  calculatedBy      String? // User ID who triggered calculation
  calculationMethod String   @default("AUTO") // "AUTO", "MANUAL", "SYSTEM"

  // Relations
  menu        NutritionMenu         @relation(fields: [menuId], references: [id], onDelete: Cascade)
  requirement NutritionRequirement? @relation(fields: [requirementId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([menuId])
  @@index([meetsAKG])
  @@index([calculatedAt])
  @@map("menu_nutrition_calculations")
}

// === Cost Calculation Engine ===
model MenuCostCalculation {
  id     String @id @default(cuid())
  menuId String @unique

  // Ingredient Costs
  totalIngredientCost Float @default(0) // Sum dari semua ingredient cost
  ingredientBreakdown Json? // Detail cost per ingredient

  // Labor Costs
  laborCostPerHour Float @default(0) // Biaya tenaga kerja per jam
  preparationHours Float @default(0) // Jam persiapan
  cookingHours     Float @default(0) // Jam memasak
  totalLaborCost   Float @default(0) // Total biaya tenaga kerja

  // Utility Costs
  gasCost          Float @default(0) // Biaya gas
  electricityCost  Float @default(0) // Biaya listrik
  waterCost        Float @default(0) // Biaya air
  totalUtilityCost Float @default(0) // Total utility cost

  // Other Operational Costs
  packagingCost Float @default(0) // Biaya kemasan
  equipmentCost Float @default(0) // Biaya peralatan (depreciation)
  cleaningCost  Float @default(0) // Biaya kebersihan

  // Overhead Costs
  overheadPercentage Float @default(15) // Overhead percentage (default 15%)
  overheadCost       Float @default(0) // Calculated overhead cost

  // Total Costs
  totalDirectCost   Float @default(0) // Ingredient + Labor + Utility
  totalIndirectCost Float @default(0) // Packaging + Equipment + Cleaning + Overhead
  grandTotalCost    Float @default(0) // Total semua biaya

  // Per Portion Calculations
  plannedPortions Int   @default(1) // Jumlah porsi yang direncanakan
  costPerPortion  Float @default(0) // Total cost / planned portions

  // Pricing Strategy
  targetProfitMargin   Float   @default(0) // Target margin keuntungan (%)
  recommendedPrice     Float   @default(0) // Recommended selling price
  marketPrice          Float? // Harga pasar kompetitor
  priceCompetitiveness String? // "COMPETITIVE", "PREMIUM", "BUDGET"

  // Cost Analysis
  ingredientCostRatio Float @default(0) // % ingredient cost dari total
  laborCostRatio      Float @default(0) // % labor cost dari total
  overheadCostRatio   Float @default(0) // % overhead cost dari total

  // Cost Optimization Suggestions
  costOptimizations      String[] // Saran optimasi biaya
  alternativeIngredients String[] // Saran bahan alternatif yang lebih murah

  // Calculation Metadata
  calculatedAt      DateTime @default(now())
  calculatedBy      String? // User ID
  calculationMethod String   @default("AUTO") // "AUTO", "MANUAL", "SYSTEM"
  isActive          Boolean  @default(true)

  // Relations
  menu NutritionMenu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([menuId])
  @@index([costPerPortion])
  @@index([calculatedAt])
  @@map("menu_cost_calculations")
}

// ================================ HRD MANAGEMENT SYSTEM ================================

// === Department & Position Management ===
model Department {
  id     String @id @default(cuid())
  sppgId String

  // Department Details
  departmentCode String
  departmentName String
  description    String?
  parentId       String? // For hierarchical structure
  managerId      String? // Department head employee ID

  // Budget & Capacity
  budgetAllocated  Float?
  maxEmployees     Int?
  currentEmployees Int    @default(0)

  // Contact Information
  email    String?
  phone    String?
  location String?

  // Status
  isActive Boolean @default(true)

  // Relations
  sppg      SPPG         @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  parent    Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children  Department[] @relation("DepartmentHierarchy")
  employees Employee[]
  positions Position[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sppgId, departmentCode])
  @@index([sppgId, isActive])
  @@index([parentId])
  @@map("departments")
}

model Position {
  id           String @id @default(cuid())
  sppgId       String
  departmentId String

  // Position Details
  positionCode     String
  positionName     String
  jobDescription   String?
  requirements     String[] // Required skills/qualifications
  responsibilities String[] // Job responsibilities

  // Hierarchy
  level     EmployeeLevel @default(STAFF)
  reportsTo String? // Position ID of supervisor

  // Salary Range
  minSalary Float?
  maxSalary Float?
  currency  String @default("IDR")

  // Position Limits
  maxOccupants     Int @default(1)
  currentOccupants Int @default(0)

  // Status
  isActive Boolean @default(true)

  // Relations
  sppg       SPPG       @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id])
  employees  Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sppgId, positionCode])
  @@index([sppgId, departmentId])
  @@index([level, isActive])
  @@map("positions")
}

// === Employee Master Data ===
model Employee {
  id     String  @id @default(cuid())
  sppgId String
  userId String? @unique // Link to User account

  // Employee Identification
  employeeId   String  @unique // Employee number
  employeeCode String? // Alternative code

  // Personal Information
  fullName      String
  nickname      String?
  nik           String?       @unique // National ID Number
  dateOfBirth   DateTime
  placeOfBirth  String?
  gender        Gender
  religion      String?
  maritalStatus MaritalStatus @default(SINGLE)
  bloodType     String?
  nationality   String        @default("Indonesian")

  // Contact Information
  phone         String?
  email         String?
  personalEmail String?

  // NEW: Structured Address with Regional Master Data
  addressDetail String // "Jl. Sudirman No. 45, RT 02 RW 05"
  villageId     String
  postalCode    String?

  // Emergency Contact
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?

  // Employment Information
  departmentId     String
  positionId       String
  employmentType   EmploymentType   @default(PERMANENT)
  employmentStatus EmploymentStatus @default(PROBATION)

  // Employment Dates
  joinDate          DateTime
  probationEndDate  DateTime?
  contractStartDate DateTime?
  contractEndDate   DateTime?
  terminationDate   DateTime?
  terminationReason String?

  // Reporting Structure
  directSupervisor String? // Employee ID of supervisor
  workLocation     String?
  workScheduleId   String?

  // Salary Information
  basicSalary Float?
  currency    String  @default("IDR")
  salaryGrade String?

  // Tax & Banking
  taxId       String? // NPWP
  bankAccount String?
  bankName    String?
  bankBranch  String?

  // Profile
  photoUrl  String?
  biography String?
  skills    String[] // Array of skills
  languages String[] // Spoken languages

  // Status
  isActive Boolean @default(true)

  // Relations
  sppg         SPPG          @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [id])
  department   Department    @relation(fields: [departmentId], references: [id])
  position     Position      @relation(fields: [positionId], references: [id])
  workSchedule WorkSchedule? @relation(fields: [workScheduleId], references: [id])

  // NEW: Regional Master Data Relations
  village Village @relation("EmployeeVillage", fields: [villageId], references: [id])

  // HRD Relations
  documents           EmployeeDocument[]
  certifications      EmployeeCertification[]
  attendances         EmployeeAttendance[]
  leaveRequests       LeaveRequest[]
  leaveBalances       LeaveBalance[]
  payrolls            Payroll[]
  performanceReviews  PerformanceReview[]
  trainings           EmployeeTraining[]
  disciplinaryActions DisciplinaryAction[]

  // SPPG Team Relations
  teamMemberships SppgTeamMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, employmentStatus])
  @@index([departmentId, positionId])
  @@index([employmentStatus, isActive])
  @@index([joinDate])
  @@map("employees")
}

// === Work Schedule Management ===
model WorkSchedule {
  id     String @id @default(cuid())
  sppgId String

  // Schedule Details
  scheduleName String
  description  String?

  // Work Hours
  mondayStart    String? // "08:00"
  mondayEnd      String? // "17:00"
  tuesdayStart   String?
  tuesdayEnd     String?
  wednesdayStart String?
  wednesdayEnd   String?
  thursdayStart  String?
  thursdayEnd    String?
  fridayStart    String?
  fridayEnd      String?
  saturdayStart  String?
  saturdayEnd    String?
  sundayStart    String?
  sundayEnd      String?

  // Break Times
  breakDuration   Int     @default(60) // Minutes
  lunchBreakStart String? // "12:00"
  lunchBreakEnd   String? // "13:00"

  // Weekly Hours
  hoursPerWeek    Float @default(40)
  workDaysPerWeek Int   @default(5)

  // Overtime Rules
  overtimeAllowed  Boolean @default(true)
  maxOvertimeDaily Float   @default(4) // Hours

  // Flexibility
  flexibleHours  Boolean @default(false)
  coreHoursStart String?
  coreHoursEnd   String?

  // Status
  isActive Boolean @default(true)

  // Relations
  sppg      SPPG       @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  employees Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, isActive])
  @@map("work_schedules")
}

// === School-Level Distribution ===
model SchoolDistribution {
  id        String @id @default(cuid())
  programId String
  schoolId  String
  menuId    String

  // Distribution Planning
  distributionDate DateTime
  targetQuantity   Int // Target jumlah porsi
  actualQuantity   Int      @default(0) // Aktual yang didistribusi

  // School Information
  schoolName     String
  targetStudents Int // Siswa target penerima

  // Menu Information
  menuName    String
  portionSize Float // Ukuran porsi (gram)
  totalWeight Float  @default(0) // Total berat makanan (kg)

  // Cost Information
  costPerPortion  Float  @default(0)
  totalCost       Float  @default(0)
  budgetAllocated Float?

  // Logistics
  deliveryTime    DateTime?
  deliveryAddress String
  deliveryContact String
  deliveryStatus  String    @default("PLANNED") // "PLANNED", "IN_TRANSIT", "DELIVERED", "CONFIRMED", "ISSUE"

  // Quality Control
  temperatureCheck Boolean @default(false)
  foodTemperature  Float? // Suhu makanan saat diterima
  qualityStatus    String? // "EXCELLENT", "GOOD", "ACCEPTABLE", "REJECTED"
  qualityNotes     String?

  // Confirmation
  receivedBy String? // Penerima di sekolah
  receivedAt DateTime?
  signature  String? // Base64 signature
  photos     String[] // URL foto konfirmasi

  // Feedback
  schoolFeedback    String?
  satisfactionScore Int? // 1-5
  issues            String[] // Masalah yang ditemukan

  // Follow-up
  needsFollowUp Boolean @default(false)
  followUpNotes String?

  // Relations
  program NutritionProgram      @relation(fields: [programId], references: [id], onDelete: Cascade)
  school  SchoolBeneficiary     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  menu    NutritionMenu         @relation(fields: [menuId], references: [id])
  reports SchoolFeedingReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([programId, distributionDate])
  @@index([schoolId, distributionDate])
  @@index([deliveryStatus])
  @@map("school_distributions")
}

// === School Feeding Reports ===
model SchoolFeedingReport {
  id             String   @id @default(cuid())
  distributionId String
  schoolId       String
  reportDate     DateTime @default(now())
  reportType     String   @default("DAILY") // "DAILY", "WEEKLY", "MONTHLY"

  // Distribution Summary
  totalStudentsServed   Int // Total siswa yang dilayani
  totalPortionsServed   Int // Total porsi yang disajikan
  totalPortionsConsumed Int // Total porsi yang dikonsumsi
  wastePercentage       Float @default(0) // Persentase sisa makanan

  // Student Participation
  attendanceRate    Float @default(0) // Tingkat kehadiran (%)
  participationRate Float @default(0) // Tingkat partisipasi makan (%)

  // Quality Assessment
  foodTemperature    Float? // Suhu makanan rata-rata
  tasteRating        Float? // Rating rasa (1-5)
  presentationRating Float? // Rating penyajian (1-5)
  overallRating      Float? // Rating keseluruhan (1-5)

  // Observations
  studentFeedback       String[] // Feedback dari siswa
  teacherFeedback       String[] // Feedback dari guru
  nutritionObservations String[] // Observasi nutrisi

  // Issues & Actions
  issuesReported      String[] // Masalah yang dilaporkan
  actionsRequired     String[] // Tindakan yang diperlukan
  recommendationsNext String[] // Rekomendasi untuk distribusi berikutnya

  // Health Impact (optional)
  healthObservations  String? // Observasi kesehatan siswa
  energyLevels        String? // "HIGH", "NORMAL", "LOW"
  concentrationLevels String? // "HIGH", "NORMAL", "LOW"

  // Staff Assessment
  reportedBy  String // User ID staff pelapor
  reviewedBy  String? // User ID reviewer
  reviewNotes String? // Catatan reviewer

  // Status
  reportStatus String @default("SUBMITTED") // "SUBMITTED", "REVIEWED", "APPROVED"

  // Relations
  distribution SchoolDistribution @relation(fields: [distributionId], references: [id], onDelete: Cascade)
  school       SchoolBeneficiary  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId, reportDate])
  @@index([distributionId])
  @@index([reportType, reportDate])
  @@map("school_feeding_reports")
}

// === Monitoring & Evaluasi ===
model ProgramMonitoring {
  id        String @id @default(cuid())
  programId String

  // Monitoring Period
  monitoringMonth String // "2024-10"
  monitoringYear  Int
  reportingWeek   Int? // Minggu ke- dalam bulan
  reportedBy      String // User ID
  reportDate      DateTime @default(now())

  // Participation Metrics
  targetRecipients   Int
  enrolledRecipients Int
  activeRecipients   Int
  dropoutCount       Int
  newEnrollments     Int
  attendanceRate     Float // Percentage

  // Nutrition Outcomes
  assessmentsCompleted Int @default(0)
  improvedNutrition    Int @default(0) // Count dengan peningkatan status gizi
  stableNutrition      Int @default(0)
  worsenedNutrition    Int @default(0)
  criticalCases        Int @default(0) // Kasus gizi buruk/kritis

  // Operational Metrics
  feedingDaysPlanned   Int
  feedingDaysCompleted Int
  menuVariety          Int // Jumlah variasi menu
  stockoutDays         Int // Hari kehabisan stok
  qualityIssues        Int // Jumlah masalah kualitas

  // Production Metrics
  totalMealsProduced    Int
  totalMealsDistributed Int
  wastePercentage       Float
  productionEfficiency  Float // Percentage

  // Financial Performance
  budgetAllocated   Float
  budgetUtilized    Float
  budgetUtilization Float // Percentage
  costPerRecipient  Float
  costPerMeal       Float
  savings           Float // Penghematan dari target

  // Quality Metrics
  avgQualityScore      Float // Rata-rata skor kualitas
  customerSatisfaction Float // Rata-rata kepuasan penerima
  complaintCount       Int   @default(0)
  complimentCount      Int   @default(0)

  // Health & Safety
  foodSafetyIncidents   Int    @default(0)
  hygieneScore          Float? // Rata-rata skor kebersihan
  temperatureCompliance Float? // Compliance suhu makanan (%)

  // Staff Performance
  staffAttendance   Float // Kehadiran staff (%)
  trainingCompleted Int // Jumlah training yang diselesaikan

  // Challenges & Issues
  majorChallenges     String[] // Tantangan utama
  minorIssues         String[] // Masalah kecil
  resourceConstraints String[] // Keterbatasan sumber daya

  // Achievements
  achievements  String[] // Pencapaian periode ini
  bestPractices String[] // Best practices
  innovations   String[] // Inovasi yang diterapkan

  // Recommendations
  recommendedActions String[] // Tindakan yang disarankan
  priorityAreas      String[] // Area prioritas perbaikan
  resourceNeeds      String[] // Kebutuhan sumber daya

  // Future Planning
  nextMonthTargets String[] // Target bulan depan
  improvementPlans String[] // Rencana perbaikan

  // Stakeholder Feedback
  parentFeedback     String? // Feedback dari orang tua
  teacherFeedback    String? // Feedback dari guru
  communityFeedback  String? // Feedback dari masyarakat
  governmentFeedback String? // Feedback dari pemerintah

  // Relations
  program NutritionProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([programId, monitoringMonth])
  @@index([monitoringMonth, monitoringYear])
  @@map("program_monitoring")
}

// ================================ SPPG OPERATIONAL MODELS ================================

// === Program Gizi & Menu Management ===
model NutritionProgram {
  id     String @id @default(cuid())
  sppgId String

  // Program Details
  name        String
  description String?
  programCode String      @unique // Kode program unik
  programType ProgramType
  targetGroup TargetGroup

  // Nutrition Goals
  calorieTarget Float? // Target kalori per hari
  proteinTarget Float? // Target protein (gram)
  carbTarget    Float? // Target karbohidrat (gram) 
  fatTarget     Float? // Target lemak (gram)
  fiberTarget   Float? // Target serat (gram)

  // Program Schedule
  startDate   DateTime
  endDate     DateTime?
  feedingDays Int[] // Hari dalam seminggu [1,2,3,4,5]
  mealsPerDay Int       @default(1)

  // Budget & Targets
  totalBudget       Float?
  budgetPerMeal     Float?
  targetRecipients  Int
  currentRecipients Int    @default(0)

  // Location
  implementationArea String // Area implementasi
  partnerSchools     String[] // Sekolah mitra

  // Status
  status String @default("ACTIVE") // ACTIVE, PAUSED, COMPLETED, CANCELLED

  // Relations
  sppg                SPPG                  @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  menus               NutritionMenu[]
  procurementPlans    ProcurementPlan[]
  schools             SchoolBeneficiary[]
  schoolDistributions SchoolDistribution[]
  productions         FoodProduction[]
  distributions       FoodDistribution[]
  monitoring          ProgramMonitoring[]
  feedback            BeneficiaryFeedback[]
  menuPlans           MenuPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, status])
  @@index([programType, status])
  @@index([startDate, endDate])
  @@map("nutrition_programs")
}

model NutritionMenu {
  id        String @id @default(cuid())
  programId String

  // Menu Details
  menuName    String
  menuCode    String // Kode menu
  description String?
  mealType    MealType
  servingSize Int // Porsi per orang (gram)

  // Nutrition Facts removed - now calculated in MenuNutritionCalculation
  // This ensures single source of truth for nutrition data

  // Cost & Pricing
  costPerServing Float
  sellingPrice   Float?

  // Recipe Information
  cookingTime   Int? // Menit
  difficulty    String? // "EASY", "MEDIUM", "HARD"
  cookingMethod String? // "STEAM", "BOIL", "FRY", "BAKE"

  // Allergen Information
  allergens    String[] // "GLUTEN", "DAIRY", "EGGS", "NUTS"
  isHalal      Boolean  @default(true)
  isVegetarian Boolean  @default(false)

  // Status
  isActive Boolean @default(true)

  // Relations
  program             NutritionProgram          @relation(fields: [programId], references: [id], onDelete: Cascade)
  ingredients         MenuIngredient[]
  recipeSteps         RecipeStep[]
  productions         FoodProduction[]
  nutritionCalc       MenuNutritionCalculation?
  costCalc            MenuCostCalculation?
  schoolDistributions SchoolDistribution[]
  feedback            BeneficiaryFeedback[]
  menuAssignments     MenuAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([programId, menuCode])
  @@index([programId, isActive])
  @@index([mealType, isActive])
  @@map("nutrition_menus")
}

model MenuIngredient {
  id              String  @id @default(cuid())
  menuId          String
  inventoryItemId String?

  // Ingredient Details
  ingredientName String
  quantity       Float
  unit           String // "kg", "liter", "pcs", "gram"
  costPerUnit    Float
  totalCost      Float

  // Nutrition Contribution removed - will be calculated automatically
  // from InventoryItem nutrition data when needed

  // Preparation Notes
  preparationNotes String?
  isOptional       Boolean  @default(false)
  substitutes      String[] // Bahan pengganti

  // Relations
  menu          NutritionMenu  @relation(fields: [menuId], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem? @relation(fields: [inventoryItemId], references: [id])

  @@index([menuId])
  @@index([inventoryItemId])
  @@map("menu_ingredients")
}

model RecipeStep {
  id     String @id @default(cuid())
  menuId String

  // Step Details
  stepNumber  Int
  title       String? // Judul langkah
  instruction String
  duration    Int? // Menit
  temperature Float? // Celsius

  // Equipment & Tools
  equipment String[] // "WAJAN", "PANCI", "BLENDER"

  // Quality Control
  qualityCheck String? // Hal yang harus diperiksa

  // Media
  imageUrl String? // URL gambar langkah
  videoUrl String? // URL video tutorial

  // Relations
  menu NutritionMenu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@unique([menuId, stepNumber])
  @@index([menuId, stepNumber])
  @@map("recipe_steps")
}

// ================================ MENU PLANNING & SCHEDULING ================================

model MenuPlan {
  id         String   @id @default(cuid())
  programId  String
  sppgId     String // Denormalized for faster queries
  createdBy  String // User ID
  approvedBy String? // User ID

  // Plan Details
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime

  // Status Tracking
  status       MenuPlanStatus @default(DRAFT)
  isDraft      Boolean        @default(true)
  isActive     Boolean        @default(false)
  isArchived   Boolean        @default(false)
  publishedAt  DateTime?
  archivedAt   DateTime?

  // Planning Metrics
  totalDays          Int     @default(0)
  totalMenus         Int     @default(0)
  averageCostPerDay  Float   @default(0)
  totalEstimatedCost Float   @default(0)
  
  // Nutrition Balance Score (0-100)
  nutritionScore     Float?
  varietyScore       Float?
  costEfficiency     Float?
  
  // Compliance
  meetsNutritionStandards Boolean @default(false)
  meetsbudgetConstraints  Boolean @default(false)
  
  // Planning Constraints (stored as JSON)
  planningRules      Json? // Budget limits, repetition rules, etc.
  generationMetadata Json? // If AI-generated, store algorithm details

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  program     NutritionProgram   @relation(fields: [programId], references: [id], onDelete: Cascade)
  sppg        SPPG               @relation("MenuPlanSppg", fields: [sppgId], references: [id])
  creator     User               @relation("MenuPlanCreator", fields: [createdBy], references: [id])
  approver    User?              @relation("MenuPlanApprover", fields: [approvedBy], references: [id])
  assignments MenuAssignment[]
  templates   MenuPlanTemplate[]

  @@index([programId, startDate, endDate])
  @@index([sppgId])
  @@index([createdBy])
  @@map("menu_plans")
}

model MenuAssignment {
  id         String   @id @default(cuid())
  menuPlanId String
  menuId     String
  
  // Assignment Details
  assignedDate DateTime
  mealType     MealType
  
  // Portion Planning
  plannedPortions    Int   @default(0)
  estimatedCost      Float @default(0)
  
  // Nutrition per serving (denormalized for faster queries)
  calories       Int   @default(0)
  protein        Float @default(0)
  carbohydrates  Float @default(0)
  fat            Float @default(0)
  
  // Assignment Metadata
  isSubstitute Boolean @default(false) // If this is a substitute for another menu
  notes        String?
  
  // Status
  status        AssignmentStatus @default(PLANNED)
  isProduced    Boolean          @default(false)
  isDistributed Boolean          @default(false)
  
  // Actual Production Data (filled after production)
  actualPortions     Int?
  actualCost         Float?
  productionId       String? // Link to FoodProduction
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  menuPlan   MenuPlan         @relation(fields: [menuPlanId], references: [id], onDelete: Cascade)
  menu       NutritionMenu    @relation(fields: [menuId], references: [id])
  production FoodProduction?  @relation(fields: [productionId], references: [id])

  @@unique([menuPlanId, assignedDate, mealType]) // One menu per meal type per day
  @@index([menuPlanId, assignedDate])
  @@index([menuId])
  @@index([assignedDate])
  @@map("menu_assignments")
}

model MenuPlanTemplate {
  id          String @id @default(cuid())
  menuPlanId  String
  sppgId      String
  createdBy   String // User ID

  // Template Details
  name        String
  description String?
  category    String? // "Weekly", "Monthly", "Seasonal", etc.
  
  // Template Pattern (stored as JSON)
  // Contains the pattern of menu assignments
  templatePattern Json
  
  // Usage Tracking
  useCount    Int      @default(0)
  lastUsedAt  DateTime?
  isPublic    Boolean  @default(false) // Can be shared with other SPPGs
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  menuPlan MenuPlan @relation(fields: [menuPlanId], references: [id], onDelete: Cascade)
  sppg     SPPG     @relation("MenuPlanTemplateSppg", fields: [sppgId], references: [id])
  creator  User     @relation(fields: [createdBy], references: [id])

  @@index([sppgId, category])
  @@index([createdBy])
  @@map("menu_plan_templates")
}

model NutritionStandard {
  id String @id @default(cuid())

  // Target Group
  targetGroup  TargetGroup
  ageGroup     AgeGroup
  gender       Gender?
  
  // Activity Level (affects calorie needs)
  activityLevel ActivityLevel @default(MODERATE)

  // Daily Requirements (per person)
  calories       Int
  protein        Float // grams
  carbohydrates  Float // grams
  fat            Float // grams
  fiber          Float // grams
  
  // Micronutrients
  calcium    Float? // mg
  iron       Float? // mg
  vitaminA   Float? // mcg
  vitaminC   Float? // mg
  vitaminD   Float? // mcg
  vitaminE   Float? // mg
  folate     Float? // mcg
  zinc       Float? // mg
  
  // Ranges (for flexibility)
  caloriesMin Int?
  caloriesMax Int?
  proteinMin  Float?
  proteinMax  Float?
  
  // Reference Source
  source      String? // "Kemenkes RI", "WHO", etc.
  referenceYear Int?
  notes       String?
  
  // Status
  isActive Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([targetGroup, ageGroup, gender, activityLevel])
  @@index([targetGroup, ageGroup])
  @@map("nutrition_standards")
}

// === Marketing & Lead Management dihapus - tidak diperlukan untuk fase operasional ===

// ================================ MISSING HRD MODELS ================================

// === Employee Documents & Certifications ===
model EmployeeDocument {
  id         String @id @default(cuid())
  employeeId String

  // Document Details
  documentType   DocumentType
  documentName   String
  documentNumber String?
  description    String?

  // File Information
  fileUrl  String
  fileName String
  fileSize Int? // Bytes
  mimeType String?

  // Validity
  issueDate  DateTime?
  expiryDate DateTime?
  isExpired  Boolean   @default(false)

  // Verification
  isVerified Boolean   @default(false)
  verifiedBy String? // Employee ID
  verifiedAt DateTime?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, documentType])
  @@index([expiryDate, isExpired])
  @@map("employee_documents")
}

model EmployeeCertification {
  id         String @id @default(cuid())
  employeeId String

  // Certification Details
  certificationName   String
  issuingOrganization String
  certificationNumber String?
  description         String?

  // Validity
  issueDate  DateTime
  expiryDate DateTime?
  isActive   Boolean   @default(true)

  // Verification
  verificationUrl String? // URL to verify certificate
  certificateUrl  String? // URL to certificate file

  // Renewal
  requiresRenewal Boolean   @default(false)
  renewalDate     DateTime?
  renewalReminder DateTime?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, isActive])
  @@index([expiryDate, isActive])
  @@map("employee_certifications")
}

// === Attendance Management ===
model EmployeeAttendance {
  id         String @id @default(cuid())
  employeeId String

  // Attendance Date
  attendanceDate DateTime @db.Date
  dayOfWeek      String // "MONDAY", "TUESDAY", etc.

  // Clock In/Out Times
  clockIn    DateTime?
  clockOut   DateTime?
  breakStart DateTime?
  breakEnd   DateTime?

  // Calculated Hours
  scheduledHours Float @default(8)
  actualHours    Float @default(0)
  breakHours     Float @default(1)
  overtimeHours  Float @default(0)

  // Attendance Status
  status         AttendanceStatus @default(PRESENT)
  attendanceType String           @default("REGULAR") // "REGULAR", "OVERTIME", "HOLIDAY"

  // Location Tracking (GPS)
  clockInLocation  String?
  clockOutLocation String?
  clockInMethod    String? // "MANUAL", "FINGERPRINT", "FACE_RECOGNITION", "MOBILE"

  // Late & Early Departure
  lateMinutes       Int @default(0)
  earlyLeaveMinutes Int @default(0)

  // Approval & Notes
  isApproved Boolean   @default(false)
  approvedBy String? // Employee ID
  approvedAt DateTime?
  notes      String?
  adminNotes String?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeId, attendanceDate])
  @@index([attendanceDate, status])
  @@index([employeeId, attendanceDate])
  @@map("employee_attendances")
}

// === Leave Management ===
model LeaveBalance {
  id         String @id @default(cuid())
  employeeId String

  // Leave Year
  leaveYear Int

  // Leave Entitlements
  annualLeaveEntitlement    Int @default(12) // Days per year
  sickLeaveEntitlement      Int @default(12)
  emergencyLeaveEntitlement Int @default(2)

  // Used Leave
  annualLeaveUsed    Int @default(0)
  sickLeaveUsed      Int @default(0)
  emergencyLeaveUsed Int @default(0)

  // Remaining Leave
  annualLeaveRemaining    Int @default(12)
  sickLeaveRemaining      Int @default(12)
  emergencyLeaveRemaining Int @default(2)

  // Carried Over from Previous Year
  carriedOverDays Int @default(0)
  maxCarryOver    Int @default(5)

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeId, leaveYear])
  @@index([leaveYear])
  @@map("leave_balances")
}

model LeaveRequest {
  id         String @id @default(cuid())
  employeeId String

  // Leave Details
  leaveType LeaveType
  startDate DateTime  @db.Date
  endDate   DateTime  @db.Date
  totalDays Int
  halfDay   Boolean   @default(false)

  // Request Details
  reason           String
  emergencyContact String?
  emergencyPhone   String?
  coveringEmployee String? // Employee ID covering duties

  // Approval Workflow
  status    LeaveStatus @default(PENDING)
  appliedAt DateTime    @default(now())

  // First Level Approval (Direct Supervisor)
  supervisorId     String?
  supervisorStatus String? // "PENDING", "APPROVED", "REJECTED"
  supervisorNotes  String?
  supervisorDate   DateTime?

  // HR Approval
  hrApprovedBy String? // HR Employee ID
  hrStatus     String? // "PENDING", "APPROVED", "REJECTED"
  hrNotes      String?
  hrApprovedAt DateTime?

  // Final Status
  finalApprovedBy String? // Final approver Employee ID
  rejectionReason String?

  // Supporting Documents
  documents          String[] // URLs to supporting documents
  medicalCertificate String? // For sick leave

  // Leave Execution
  actualStartDate DateTime?
  actualEndDate   DateTime?
  actualDays      Int?
  returnDate      DateTime?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, status])
  @@index([startDate, endDate])
  @@index([leaveType, status])
  @@map("leave_requests")
}

// === Payroll Management ===
model Payroll {
  id         String @id @default(cuid())
  employeeId String

  // Payroll Period
  payrollMonth   String // "2025-01"
  payrollYear    Int
  payPeriodStart DateTime  @db.Date
  payPeriodEnd   DateTime  @db.Date
  payDate        DateTime?

  // Basic Salary
  basicSalary  Float
  dailySalary  Float
  hourlySalary Float?

  // Attendance Summary
  workDays       Int
  actualWorkDays Int
  absentDays     Int   @default(0)
  lateDays       Int   @default(0)
  overtimeHours  Float @default(0)
  holidayHours   Float @default(0)

  // Allowances (Tunjangan)
  transportAllowance Float @default(0)
  mealAllowance      Float @default(0)
  housingAllowance   Float @default(0)
  familyAllowance    Float @default(0)
  performanceBonus   Float @default(0)
  overtimePayment    Float @default(0)
  holidayPayment     Float @default(0)
  otherAllowances    Json? // Additional allowances

  // Deductions (Potongan)
  incomeTax           Float @default(0)
  socialInsurance     Float @default(0) // BPJS Kesehatan
  employmentInsurance Float @default(0) // BPJS Ketenagakerjaan
  loanDeduction       Float @default(0)
  lateDeduction       Float @default(0)
  absentDeduction     Float @default(0)
  otherDeductions     Json? // Additional deductions

  // Calculated Amounts
  grossSalary     Float // Basic + Allowances
  totalDeductions Float // Sum of all deductions
  netSalary       Float // Gross - Deductions

  // Tax Calculations
  taxableIncome Float
  ptkpAmount    Float @default(0) // PTKP (Penghasilan Tidak Kena Pajak)
  pph21Amount   Float @default(0) // PPh 21

  // Status & Approval
  status       PayrollStatus @default(DRAFT)
  calculatedAt DateTime?
  calculatedBy String? // Employee ID
  approvedBy   String? // Employee ID
  approvedAt   DateTime?
  paidAt       DateTime?

  // Payment Details
  paymentMethod     String? // "BANK_TRANSFER", "CASH", "CHECK"
  bankAccount       String?
  transferReference String?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeId, payrollMonth, payrollYear])
  @@index([payrollMonth, payrollYear])
  @@index([status, payDate])
  @@map("payrolls")
}

// === Performance Management ===
model PerformanceReview {
  id         String @id @default(cuid())
  employeeId String
  reviewerId String // Supervisor/Manager Employee ID

  // Review Period
  reviewPeriod String // "2025-Q1", "2025-H1", "2025-ANNUAL"
  reviewType   ReviewType
  reviewYear   Int

  // Review Dates
  dueDate     DateTime
  startedAt   DateTime?
  submittedAt DateTime?
  completedAt DateTime?

  // Performance Scores (1-5 scale)
  technicalSkills Float? // Job-specific technical abilities
  communication   Float? // Communication & interpersonal skills
  teamwork        Float? // Collaboration & team spirit
  leadership      Float? // Leadership & initiative
  problemSolving  Float? // Analytical & problem-solving skills
  timeManagement  Float? // Punctuality & time management
  qualityOfWork   Float? // Work quality & accuracy
  productivity    Float? // Output & efficiency
  innovation      Float? // Creativity & innovation
  customerService Float? // Customer/stakeholder orientation

  // Overall Assessment
  overallScore  Float? // Average of all scores
  overallRating String? // "OUTSTANDING", "EXCEEDS", "MEETS", "BELOW", "UNSATISFACTORY"

  // Goals & Achievements
  previousGoals String[] // Goals from previous review
  achievedGoals String[] // Goals achieved this period
  missedGoals   String[] // Goals not achieved
  newGoals      String[] // Goals for next period

  // Feedback & Comments
  strengths         String[] // Employee strengths
  areasImprovement  String[] // Areas needing improvement
  trainingNeeds     String[] // Recommended training
  careerDevelopment String[] // Career development suggestions

  // Written Feedback
  reviewerComments String?
  employeeComments String?
  selfAssessment   String?
  developmentPlan  String?

  // Status & Workflow
  status           String  @default("DRAFT") // "DRAFT", "SUBMITTED", "UNDER_REVIEW", "COMPLETED", "ARCHIVED"
  isEmployeeSigned Boolean @default(false)
  isReviewerSigned Boolean @default(false)

  // Follow-up
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?
  followUpNotes    String?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, reviewPeriod])
  @@index([reviewType, reviewYear])
  @@index([status, dueDate])
  @@map("performance_reviews")
}

// === Training & Development ===
model Training {
  id     String @id @default(cuid())
  sppgId String

  // Training Details
  trainingCode String
  trainingName String
  description  String?
  category     String // "TECHNICAL", "SOFT_SKILLS", "SAFETY", "COMPLIANCE", "LEADERSHIP"

  // Training Provider
  provider       String // "INTERNAL", "EXTERNAL", "ONLINE"
  providerName   String?
  trainerName    String?
  trainerContact String?

  // Training Schedule
  startDate DateTime
  endDate   DateTime
  duration  Int // Hours
  location  String?
  mode      String // "CLASSROOM", "ONLINE", "HYBRID", "ON_THE_JOB"

  // Capacity & Cost
  maxParticipants     Int
  currentParticipants Int    @default(0)
  costPerParticipant  Float?
  totalBudget         Float?

  // Training Materials
  materials     String[] // URLs to training materials
  prerequisites String[]
  objectives    String[]

  // Certification
  providesCertificate Boolean @default(false)
  certificateName     String?
  validityPeriod      Int? // Months

  // Status
  status TrainingStatus @default(PLANNED)

  // Relations
  sppg         SPPG               @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  participants EmployeeTraining[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sppgId, trainingCode])
  @@index([sppgId, status])
  @@index([startDate, endDate])
  @@map("trainings")
}

model EmployeeTraining {
  id         String @id @default(cuid())
  employeeId String
  trainingId String

  // Enrollment
  enrolledAt DateTime @default(now())
  enrolledBy String? // Who enrolled the employee

  // Attendance
  attended       Boolean @default(false)
  attendanceRate Float? // Percentage of sessions attended

  // Assessment
  preTestScore  Float? // Pre-training assessment
  postTestScore Float? // Post-training assessment
  finalScore    Float?
  passed        Boolean @default(false)

  // Completion
  completedAt       DateTime?
  certificateUrl    String? // URL to certificate
  certificateNumber String?

  // Feedback
  feedback String?
  rating   Float? // Training rating by employee (1-5)

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeId, trainingId])
  @@index([trainingId, attended])
  @@map("employee_trainings")
}

// === Disciplinary Management ===
model DisciplinaryAction {
  id         String @id @default(cuid())
  employeeId String

  // Incident Details
  incidentDate DateTime
  reportedDate DateTime @default(now())
  reportedBy   String // Employee ID of reporter

  // Violation Details
  violationType  String // "ATTENDANCE", "CONDUCT", "PERFORMANCE", "POLICY", "SAFETY"
  violationLevel String // "MINOR", "MAJOR", "SEVERE"
  description    String
  evidenceUrls   String[] // Supporting evidence

  // Investigation
  investigatedBy     String? // Employee ID of investigator
  investigationNotes String?
  witnessStatements  String[]

  // Action Taken
  actionType    String // "VERBAL_WARNING", "WRITTEN_WARNING", "SUSPENSION", "TERMINATION", "TRAINING"
  actionDetails String
  startDate     DateTime?
  endDate       DateTime?

  // Follow-up
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?
  followUpNotes    String?

  // Status
  status     String    @default("OPEN") // "OPEN", "UNDER_INVESTIGATION", "RESOLVED", "APPEALED", "CLOSED"
  resolvedAt DateTime?
  resolvedBy String?

  // Appeal
  appealSubmitted Boolean   @default(false)
  appealDate      DateTime?
  appealNotes     String?
  appealDecision  String?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, status])
  @@index([violationType, violationLevel])
  @@index([incidentDate])
  @@map("disciplinary_actions")
}

// ================================ SPPG OPERATIONAL MODELS (SK 63/2025) ================================

// === Virtual Account & Dana Banper Management ===
model SppgVirtualAccount {
  id     String @id @default(cuid())
  sppgId String @unique

  // Virtual Account Details
  accountNumber String @unique
  accountName   String // Nama rekening atas nama yayasan
  bankCode      String
  bankName      String

  // Yayasan Information
  yayasanName    String
  yayasanAddress String
  yayasanPic     String // Person in Charge
  yayasanPhone   String
  yayasanEmail   String

  // Account Status
  isActive      Boolean   @default(true)
  activatedAt   DateTime?
  deactivatedAt DateTime?

  // Balance Information
  currentBalance     Float     @default(0)
  lastUpdatedBalance DateTime?

  // Relations
  sppg           SPPG                @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  banperRequests BanperRequest[]
  transactions   BanperTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sppg_virtual_accounts")
}

model BanperRequest {
  id               String @id @default(cuid())
  sppgId           String
  virtualAccountId String

  // Request Details
  requestNumber     String   @unique
  requestDate       DateTime @default(now())
  operationalPeriod String // "2025-01-01 to 2025-01-14" (12 hari operasional)

  // Beneficiary Information
  totalBeneficiaries   Int
  beneficiaryBreakdown Json // Detail per kategori penerima manfaat

  // Financial Calculation
  dailyBudgetPerBeneficiary Float
  operationalDays           Int   @default(12) // 12 hari operasional per 2 minggu

  // Cost Breakdown
  foodCostTotal   Float // Biaya bahan makanan
  operationalCost Float // Biaya operasional
  transportCost   Float? // Biaya transportasi
  utilityCost     Float? // Biaya listrik, air, internet
  staffCost       Float? // Biaya tenaga kerja
  otherCosts      Float? // Biaya lainnya

  totalAmount Float // Total dana yang diminta

  // Request Status & Approval
  status      BanperRequestStatus @default(DRAFT)
  submittedAt DateTime?
  reviewedAt  DateTime?
  approvedAt  DateTime?
  disbursedAt DateTime?

  // Approval Chain
  submittedBy String? // User ID
  reviewedBy  String? // User ID
  approvedBy  String? // User ID

  // Documents
  supportingDocuments String[] // URLs to supporting documents
  approvalDocuments   String[] // URLs to approval documents

  // Notes
  requestNotes    String?
  reviewNotes     String?
  rejectionReason String?

  // Relations
  sppg           SPPG                @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  virtualAccount SppgVirtualAccount  @relation(fields: [virtualAccountId], references: [id])
  transactions   BanperTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, status])
  @@index([requestDate, operationalPeriod])
  @@map("banper_requests")
}

model BanperTransaction {
  id               String  @id @default(cuid())
  sppgId           String
  virtualAccountId String
  banperRequestId  String?

  // Transaction Details
  transactionNumber String   @unique
  transactionDate   DateTime @default(now())
  transactionType   String // "INBOUND", "OUTBOUND", "ADJUSTMENT"

  // Amount Information
  amount        Float
  balanceBefore Float
  balanceAfter  Float

  // Transaction Purpose
  purpose     String
  category    String // "FOOD_PROCUREMENT", "OPERATIONAL", "TRANSPORT", "UTILITY", "STAFF", "OTHER"
  description String?

  // Reference Information
  referenceNumber String?
  receiptNumber   String?
  receiptUrl      String? // URL to receipt/proof

  // Approval
  approvedBy String? // User ID
  approvedAt DateTime?

  // Relations
  sppg           SPPG               @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  virtualAccount SppgVirtualAccount @relation(fields: [virtualAccountId], references: [id])
  banperRequest  BanperRequest?     @relation(fields: [banperRequestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, transactionDate])
  @@index([transactionType, category])
  @@map("banper_transactions")
}

// === SPPG Team Structure & Volunteer Management ===
model SppgTeamMember {
  id         String  @id @default(cuid())
  sppgId     String
  employeeId String?

  // Personal Information
  fullName String
  idNumber String? // KTP/NIK
  phone    String
  email    String?
  address  String

  // Volunteer Information
  isVolunteer       Boolean @default(true)
  recruitmentSource String? // "LOKAL", "KELUARGA_MISKIN_DESIL_1_2"

  // Role Assignment
  role            SppgRole
  roleDescription String?
  teamSize        Int? // Jumlah anggota dalam tim

  // Work Schedule
  workStartTime String? // "06:00"
  workEndTime   String? // "14:00"
  workDays      String[] // ["MONDAY", "TUESDAY", ...]

  // Compensation
  dailyWage          Float?
  monthlyWage        Float?
  transportAllowance Float?
  mealAllowance      Float?

  // Status
  isActive  Boolean   @default(true)
  joinDate  DateTime  @default(now())
  leaveDate DateTime?

  // Relations
  sppg     SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  employee Employee? @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, role])
  @@index([isActive, role])
  @@map("sppg_team_members")
}

// === Distribution Management (2 Gelombang) ===
model DistributionSchedule {
  id     String @id @default(cuid())
  sppgId String

  // Schedule Details
  distributionDate DateTime
  wave             DistributionWave

  // Target Information
  targetCategories       BeneficiaryCategory[]
  estimatedBeneficiaries Int

  // Menu & Portion
  menuName        String
  menuDescription String?
  portionSize     Float // Gram per porsi
  totalPortions   Int

  // Packaging
  packagingType String // "OMPRENG", "BOX", "CONTAINER"
  packagingCost Float?

  // Distribution Method
  deliveryMethod   String // "SCHOOL_DELIVERY", "PICKUP", "POSYANDU", "PKK"
  distributionTeam String[] // Team member IDs

  // Logistics
  vehicleCount        Int?
  estimatedTravelTime Int? // Minutes
  fuelCost            Float?

  // Status
  status      String    @default("PLANNED") // "PLANNED", "PREPARED", "IN_PROGRESS", "COMPLETED", "CANCELLED"
  startedAt   DateTime?
  completedAt DateTime?

  // Relations
  sppg       SPPG                   @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  deliveries DistributionDelivery[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, distributionDate, wave])
  @@index([status])
  @@map("distribution_schedules")
}

model DistributionDelivery {
  id         String @id @default(cuid())
  scheduleId String

  // Delivery Target
  targetType    String // "SCHOOL", "POSYANDU", "INDIVIDUAL"
  targetName    String
  targetAddress String
  targetContact String?

  // Delivery Details
  estimatedArrival  DateTime
  actualArrival     DateTime?
  portionsDelivered Int

  // Delivery Team
  driverName  String
  helperNames String[] // Nama-nama helper
  vehicleInfo String?

  // Delivery Status
  status      String    @default("ASSIGNED") // "ASSIGNED", "DEPARTED", "DELIVERED", "FAILED"
  deliveredBy String? // Team member ID
  deliveredAt DateTime?

  // Proof of Delivery
  recipientName      String?
  recipientSignature String? // URL to signature image
  deliveryPhoto      String? // URL to delivery photo
  notes              String?

  // Relations
  schedule DistributionSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  receipts BeneficiaryReceipt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([scheduleId, status])
  @@map("distribution_deliveries")
}

// === Beneficiary Receipt Management ===
model BeneficiaryReceipt {
  id         String  @id @default(cuid())
  sppgId     String
  deliveryId String?

  // Receipt Information
  receiptNumber String   @unique
  receiptDate   DateTime @default(now())

  // Beneficiary Information
  beneficiaryName     String
  beneficiaryId       String? // NIK/ID Number
  beneficiaryCategory BeneficiaryCategory

  // School/Institution Information (jika applicable)
  schoolName  String?
  className   String?
  teacherName String?

  // Meal Information
  mealType     String // "BREAKFAST", "LUNCH", "SNACK"
  menuName     String
  portionCount Int

  // Receipt Status
  status     ReceiptStatus @default(PENDING)
  receivedAt DateTime?

  // Digital Signature/Confirmation
  recipientSignature String? // URL to signature
  photoProof         String? // URL to photo
  gpsLocation        String? // GPS coordinates

  // Quality Feedback
  mealQuality Float? // 1-5 rating
  feedback    String?

  // Follow-up
  followUpRequired Boolean @default(false)
  followUpNotes    String?

  // Relations
  sppg     SPPG                  @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  delivery DistributionDelivery? @relation(fields: [deliveryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, receiptDate])
  @@index([status, beneficiaryCategory])
  @@map("beneficiary_receipts")
}

// === SPPG Operational Reports ===
model SppgOperationalReport {
  id     String @id @default(cuid())
  sppgId String

  // Report Information
  reportNumber String     @unique
  reportType   ReportType
  reportPeriod String // "2025-01-15", "2025-01-01_to_2025-01-14"
  reportDate   DateTime   @default(now())

  // Report Content
  title   String
  summary String?
  content Json // Report data in JSON format

  // Operational Data
  beneficiariesServed Int?
  mealsDistributed    Int?
  totalExpenses       Float?

  // Quality Metrics
  foodSafetyScore        Float? // 1-5
  distributionEfficiency Float? // Percentage
  beneficiaryFeedback    Float? // Average rating

  // Financial Summary
  budgetAllocated Float?
  budgetUtilized  Float?
  remainingBudget Float?

  // Documentation
  attachments String[] // URLs to supporting documents
  photos      String[] // URLs to photos

  // Approval Workflow
  preparedBy String // User ID
  reviewedBy String? // User ID
  approvedBy String? // User ID

  status      String    @default("DRAFT") // "DRAFT", "SUBMITTED", "APPROVED", "PUBLISHED"
  submittedAt DateTime?
  approvedAt  DateTime?

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, reportType, reportPeriod])
  @@index([status, reportDate])
  @@map("sppg_operational_reports")
}

// ================================ EQUIPMENT & INFRASTRUCTURE MANAGEMENT ================================

model KitchenEquipment {
  id     String @id @default(cuid())
  sppgId String

  // Equipment Details
  equipmentName String
  equipmentCode String            @unique
  category      EquipmentCategory
  brand         String?
  model         String?
  serialNumber  String?

  // Status & Condition
  condition EquipmentCondition @default(GOOD)
  status    EquipmentStatus    @default(ACTIVE)

  // Maintenance
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  maintenanceCost Float?

  // Purchase Info
  purchaseDate DateTime?
  purchaseCost Float?
  warranty     DateTime?
  supplier     String?

  // Location & Usage
  location       String?
  usageFrequency UsageFrequency?
  operatingHours Float? // Hours per day

  // Relations
  sppg           SPPG                   @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  maintenanceLog EquipmentMaintenance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, category])
  @@index([status, condition])
  @@map("kitchen_equipment")
}

model EquipmentMaintenance {
  id          String @id @default(cuid())
  equipmentId String

  // Maintenance Details
  maintenanceDate DateTime        @default(now())
  maintenanceType MaintenanceType
  description     String
  cost            Float?
  performedBy     String
  nextSchedule    DateTime?

  // Service Provider
  serviceProvider String?
  serviceContact  String?

  // Parts & Materials
  partsReplaced String[]
  materialsCost Float?
  laborCost     Float?

  // Before/After Condition
  conditionBefore EquipmentCondition?
  conditionAfter  EquipmentCondition?

  // Documentation
  photos       String[] // URLs to photos
  receiptUrl   String? // Maintenance receipt
  warrantyInfo String?

  // Relations
  equipment KitchenEquipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([equipmentId, maintenanceDate])
  @@index([maintenanceType])
  @@map("equipment_maintenance")
}

model UtilityMonitoring {
  id     String @id @default(cuid())
  sppgId String

  // Monitoring Period
  monitoringDate   DateTime @default(now())
  monitoringPeriod String // "2025-01-15", "2025-01-WEEK-3"

  // Electricity Monitoring
  electricUsage     Float? // kWh
  electricCost      Float?
  generatorUsage    Float? // Hours
  generatorFuelCost Float?
  powerOutages      Int? // Number of outages

  // Water Monitoring
  waterUsage    Float? // Liter
  waterCost     Float?
  waterQuality  WaterQualityStatus
  waterTestDate DateTime?

  // Internet Monitoring
  internetStatus InternetStatus
  internetCost   Float?
  downtimeHours  Float?

  // Gas Monitoring (for cooking)
  gasUsage      Float? // Kg
  gasCost       Float?
  gasDeliveries Int?

  // Total Utility Cost
  totalUtilityCost Float?

  // Issues & Notes
  issues           String[]
  maintenanceNeeds String[]
  notes            String?

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, monitoringDate])
  @@index([waterQuality, internetStatus])
  @@map("utility_monitoring")
}

// ================================ ADVANCED QUALITY CONTROL ================================

model LaboratoryTest {
  id     String @id @default(cuid())
  sppgId String

  // Test Details
  testDate          DateTime @default(now())
  testType          TestType
  sampleId          String
  sampleSource      String // Kitchen, Storage, Distribution Point
  sampleDescription String?

  // Test Configuration
  testParameters String[] // What is being tested
  testMethod     String?

  // Test Results
  testResults Json // Detailed test results
  testStatus  TestStatus @default(PENDING)

  // Compliance Assessment
  isCompliant      Boolean?
  bpomStandard     String?
  kemenkesStandard String?
  complianceNotes  String?

  // Laboratory Information
  laboratoryName String
  labCertNumber  String?
  testerName     String
  testCost       Float?

  // Follow-up Actions
  requiresAction Boolean   @default(false)
  actionTaken    String?
  retestRequired Boolean   @default(false)
  retestDate     DateTime?

  // Documentation
  testCertificate String? // URL to test certificate
  testPhotos      String[] // URLs to test photos

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, testType, testDate])
  @@index([testStatus, isCompliant])
  @@map("laboratory_tests")
}

model FoodSafetyCertification {
  id     String @id @default(cuid())
  sppgId String

  // Certification Details
  certificationName  String
  certifyingBody     String // BPOM, Dinkes, Halal MUI, etc.
  certificateNumber  String  @unique
  certificationScope String? // What areas are covered

  // Validity Period
  issuedDate DateTime
  expiryDate DateTime

  // Status Management
  status CertificationStatus @default(ACTIVE)

  // Renewal Process
  renewalRequired Boolean   @default(false)
  renewalDate     DateTime?
  renewalCost     Float?
  renewalStatus   String? // "NOT_STARTED", "IN_PROGRESS", "COMPLETED"

  // Assessment Details
  assessmentDate  DateTime?
  assessorName    String?
  assessmentScore Float? // 1-100
  assessmentNotes String?

  // Requirements & Compliance
  requirements     String[] // List of requirements
  complianceStatus Json // Status of each requirement

  // Documentation
  certificateUrl String?
  supportingDocs String[] // URLs to supporting documents

  // Cost Management
  initialCost Float?
  annualFee   Float?

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, status])
  @@index([expiryDate, renewalRequired])
  @@map("food_safety_certifications")
}

model DailyFoodSample {
  id     String @id @default(cuid())
  sppgId String

  // Sample Information
  sampleDate    DateTime @default(now())
  menuName      String
  batchNumber   String?
  portionTested String? // "Main dish", "Side dish", etc.

  // Sample Collection
  collectedBy    String
  collectionTime DateTime?
  sampleWeight   Float? // Grams

  // Sample Storage
  storageLocation String // Refrigerator location/ID
  storageTemp     Float? // Celsius
  storageDuration Int    @default(72) // Hours (3 days standard)

  // Quality Inspection
  visualCheck  String? // Visual inspection notes
  smellCheck   String? // Smell inspection notes
  textureCheck String? // Texture inspection notes
  colorCheck   String? // Color inspection notes

  // Quality Scoring
  overallQuality     Float? // 1-10 scale
  acceptabilityScore Float? // 1-10 scale

  // Sample Testing
  testedInLab Boolean @default(false)
  labTestId   String? // Reference to LaboratoryTest

  // Sample Disposal
  disposalDate   DateTime?
  disposalMethod String?
  disposedBy     String?
  disposalReason String?

  // Documentation
  samplePhotos String[] // URLs to sample photos

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, sampleDate])
  @@index([menuName, batchNumber])
  @@map("daily_food_samples")
}

// ================================ MENU RESEARCH & DEVELOPMENT ================================

model MenuResearch {
  id     String @id @default(cuid())
  sppgId String

  // Research Information
  researchTitle String
  researchCode  String? // Internal reference code
  researchType  ResearchType
  priority      String       @default("MEDIUM") // LOW, MEDIUM, HIGH

  // Research Details
  objective       String
  methodology     String
  hypothesis      String?
  expectedOutcome String?

  // Testing Period
  testStartDate DateTime
  testEndDate   DateTime?
  testingStatus ResearchStatus @default(PLANNING)

  // Participants & Target
  testGroupSize       Int?
  controlGroupSize    Int?
  targetBeneficiaries BeneficiaryCategory[]
  targetAgeGroup      String? // "6-12 years", "Adult", etc.

  // Budget & Resources
  researchBudget  Float?
  actualCost      Float?
  resourcesNeeded String[]

  // Results & Findings
  findings        String?
  recommendations String?
  isSuccessful    Boolean?
  successMetrics  Json? // Success criteria and results

  // Implementation
  implementationDate  DateTime?
  implementationNotes String?
  rolloutPlan         String?

  // Approval & Review
  approvedBy   String? // Employee ID
  approvalDate DateTime?
  reviewNotes  String[]

  // Relations
  sppg        SPPG             @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  testResults MenuTestResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, researchType])
  @@index([testingStatus, priority])
  @@map("menu_research")
}

model MenuTestResult {
  id         String @id @default(cuid())
  researchId String

  // Test Session Information
  testDate      DateTime @default(now())
  testSession   String // "Session 1", "Pilot Test", etc.
  menuVariation String
  testGroup     String? // "Children 6-12", "Adults", etc.

  // Nutritional Assessment
  nutritionScore Float? // 1-10 scale
  calorieContent Float?
  proteinContent Float?
  vitaminContent Json? // Detailed vitamin analysis

  // Sensory Evaluation
  tasteScore      Float? // 1-10 scale
  textureScore    Float? // 1-10 scale
  aromaScore      Float? // 1-10 scale
  appearanceScore Float? // 1-10 scale
  overallScore    Float? // 1-10 scale

  // Acceptance & Feedback
  acceptanceRate      Float? // Percentage
  participantCount    Int?
  participantFeedback String[]

  // Professional Assessment
  nutritionistNotes   String?
  chefNotes           String?
  qualityControlNotes String?

  // Cost Analysis
  costPerPortion  Float?
  ingredientCost  Float?
  preparationTime Int? // Minutes

  // Comparison Data
  comparedToCurrentMenu Boolean @default(false)
  improvementPercentage Float?

  // Relations
  research MenuResearch @relation(fields: [researchId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([researchId, testDate])
  @@index([overallScore, acceptanceRate])
  @@map("menu_test_results")
}

model LocalFoodAdaptation {
  id     String @id @default(cuid())
  sppgId String

  // Ingredient Information
  ingredientName String
  localName      String
  scientificName String?
  region         String
  season         SeasonAvailability

  // Nutritional Profile
  caloriesPer100g Float?
  proteinPer100g  Float?
  fatPer100g      Float?
  carbsPer100g    Float?
  fiberPer100g    Float?

  // Vitamins & Minerals
  vitaminContent Json? // Detailed vitamin/mineral content
  mineralContent Json? // Iron, Calcium, etc.

  // Availability & Sourcing
  avgCostPerKg  Float?
  availability  AvailabilityStatus
  bestSuppliers String[] // Local supplier names/contacts
  harvestMonths String[] // Best harvest months

  // Usage in SPPG Operations
  usageFrequency      UsageFrequency
  compatibleMenus     String[] // Menu names that can use this ingredient
  preparationMethods  String[] // Cooking methods
  storageRequirements String?

  // Cultural & Social Aspects
  culturalSignificance String?
  preparationTradition String?
  nutritionalBenefits  String?
  communityAcceptance  Float? // 1-10 scale

  // Economic Impact
  supportLocalFarmers Boolean @default(false)
  economicBenefit     String?
  sustainabilityNotes String?

  // Quality Assessment
  qualityGrade       String? // A, B, C grade
  shelfLife          Int? // Days
  processingRequired Boolean @default(false)

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, region, season])
  @@index([availability, usageFrequency])
  @@map("local_food_adaptations")
}

// ================================ ENHANCED NUTRITION SERVICES ================================

model NutritionConsultation {
  id             String @id @default(cuid())
  sppgId         String
  nutritionistId String // Employee ID

  // Consultation Details
  consultationDate DateTime         @default(now())
  consultationType ConsultationType
  sessionDuration  Int? // Minutes
  consultationFee  Float?

  // Client Information
  clientName      String?
  clientAge       Int?
  clientGender    String?
  clientContact   String?
  clientCondition SpecialCondition[]

  // Anthropometric Data
  currentWeight   Float?
  currentHeight   Float?
  bmiCalculation  Float?
  nutritionStatus BeneficiaryNutritionStatus?

  // Health Assessment
  healthHistory   String?
  currentSymptoms String[]
  medications     String[]
  allergies       String[]

  // Dietary Assessment
  currentDiet                 String?
  foodPreferences             String[]
  foodDislikes                String[]
  culturalDietaryRestrictions String[]

  // Recommendations & Planning
  recommendations           String
  dietPlan                  String?
  mealPlanning              Json? // Structured meal plans
  supplementRecommendations String[]

  // Follow-up Planning
  followUpDate  DateTime?
  followUpType  String? // "In-person", "Phone", "Group session"
  followUpNotes String?

  // Progress Tracking
  progressNotes    String[]
  isCompleted      Boolean  @default(false)
  treatmentOutcome String?

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, nutritionistId])
  @@index([consultationType, nutritionStatus])
  @@map("nutrition_consultations")
}

model NutritionEducation {
  id         String @id @default(cuid())
  sppgId     String
  educatorId String // Employee ID (Ahli Gizi)

  // Session Information
  sessionTitle   String
  sessionDate    DateTime
  sessionType    String // "Workshop", "Seminar", "Cooking Demo", etc.
  targetAudience EducationTarget

  // Session Details
  duration         Int // Minutes
  participantCount Int
  location         String
  sessionMode      String // "In-person", "Online", "Hybrid"

  // Content & Curriculum
  topics             String[] // Array of topics covered
  learningObjectives String[]
  materials          String[] // URLs to educational materials
  handouts           String[] // URLs to handouts

  // Interactive Elements
  activitiesPlanned   String[] // Games, exercises, etc.
  cookingDemoIncluded Boolean  @default(false)
  samplingProvided    Boolean  @default(false)

  // Evaluation & Assessment
  participantFeedback Float? // Average rating 1-10
  knowledgePreTest    Float? // Percentage correct
  knowledgePostTest   Float? // Percentage correct
  skillsDemonstration Float? // Practical skills score

  // Content Effectiveness
  messageClarity         Float? // 1-10 rating
  culturalRelevance      Float? // 1-10 rating
  practicalApplicability Float? // 1-10 rating

  // Follow-up & Impact
  followUpRequired       Boolean   @default(false)
  followUpPlanned        DateTime?
  behaviorChangeExpected String[]
  impactMeasurement      String?

  // Resource Management
  budgetUsed      Float?
  materialsNeeded String[]
  equipmentNeeded String[]

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, educatorId])
  @@index([targetAudience, sessionDate])
  @@map("nutrition_education")
}

// ================================ PRODUCTION OPTIMIZATION ================================

model ProductionOptimization {
  id     String @id @default(cuid())
  sppgId String

  // Optimization Project Information
  optimizationTitle String
  optimizationDate  DateTime           @default(now())
  targetMetric      OptimizationMetric
  priority          String             @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL

  // Current Performance Baseline
  currentCostPerPortion   Float?
  currentPreparationTime  Int? // Minutes
  currentWastePercentage  Float?
  currentQualityScore     Float? // 1-10
  currentNutritionDensity Float?
  currentEnergyUsage      Float? // kWh per day

  // Target Performance Goals
  targetCostPerPortion   Float?
  targetPreparationTime  Int? // Minutes
  targetWastePercentage  Float?
  targetQualityScore     Float? // 1-10
  targetNutritionDensity Float?
  targetEnergyUsage      Float? // kWh per day

  // Optimization Strategy
  strategyDescription String
  implementationSteps String[]
  resourcesRequired   String[]
  estimatedInvestment Float?
  expectedSavings     Float? // Per month

  // Implementation Timeline
  implementationStart DateTime?
  implementationEnd   DateTime?
  milestones          Json? // Key milestones and dates

  // Results & Achievement
  actualCostPerPortion   Float?
  actualPreparationTime  Int?
  actualWastePercentage  Float?
  actualQualityScore     Float?
  actualNutritionDensity Float?
  actualEnergyUsage      Float?

  // Success Evaluation
  isSuccessful        Boolean?
  successPercentage   Float? // % of goals achieved
  costSavingsAchieved Float?
  lessonsLearned      String?

  // Continuous Improvement
  recommendationsForFuture String[]
  scalabilityAssessment    String?

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, targetMetric])
  @@index([priority, isSuccessful])
  @@map("production_optimizations")
}

model WasteManagement {
  id     String @id @default(cuid())
  sppgId String

  // Waste Recording
  wasteDate     DateTime  @default(now())
  wasteType     WasteType
  wasteCategory String? // More specific category

  // Quantity Measurement
  wasteWeight    Float // Kg
  wasteVolume    Float? // Liter
  containerCount Int? // Number of containers/bags

  // Source Analysis
  wasteSource     WasteSource
  sourceSpecific  String? // More specific source
  wasteReason     String?
  responsibleArea String? // Kitchen area/process

  // Cost Impact
  ingredientValue Float? // Value of wasted ingredients
  disposalCost    Float?
  laborCost       Float? // Cost to handle waste

  // Disposal Method
  disposalMethod   DisposalMethod
  disposalLocation String?
  disposalPartner  String? // Recycling company, etc.
  disposalDate     DateTime?

  // Environmental Impact
  carbonFootprint Float? // CO2 equivalent
  waterImpact     Float? // Water usage impact

  // Prevention & Reduction
  preventionActions String[]
  reductionTarget   Float? // Target reduction %
  alternativeUses   String[] // How waste could be reused

  // Process Improvement
  processChanges String[] // Changes to prevent future waste
  trainingNeeds  String[] // Staff training requirements
  equipmentNeeds String[] // Equipment to reduce waste

  // Tracking & Analytics
  isRecurringIssue Boolean @default(false)
  trendAnalysis    String?

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, wasteDate, wasteType])
  @@index([wasteSource, disposalMethod])
  @@map("waste_management")
}

// ================================ ADVANCED ANALYTICS & PERFORMANCE ================================

model PerformanceAnalytics {
  id     String @id @default(cuid())
  sppgId String

  // Analysis Configuration
  analysisDate    DateTime      @default(now())
  analysisType    AnalyticsType
  analysisPeriod  String // "2025-Q1", "2025-01", "2025-W03"
  dataSourceRange String // Date range of analyzed data

  // Key Performance Indicators
  costEfficiency      Float? // Cost per beneficiary
  timeEfficiency      Float? // Preparation time per portion
  qualityScore        Float? // Average quality rating
  wastagePercentage   Float? // Waste percentage
  nutritionCompliance Float? // AKG compliance percentage
  energyEfficiency    Float? // Energy usage per portion

  // Financial Metrics
  totalCost          Float?
  costBreakdown      Json? // Detailed cost analysis
  profitabilityScore Float?
  budgetVariance     Float? // % over/under budget

  // Operational Metrics
  productivityRate       Float? // Portions per hour
  equipmentUtilization   Float? // % equipment usage
  staffEfficiency        Float? // Output per staff member
  distributionEfficiency Float? // On-time delivery %

  // Quality Metrics
  customerSatisfaction Float? // Beneficiary feedback score
  nutritionAccuracy    Float? // Nutrition target achievement
  foodSafetyScore      Float? // Safety compliance score

  // Trends Analysis
  costTrend       TrendDirection
  qualityTrend    TrendDirection
  efficiencyTrend TrendDirection
  demandTrend     TrendDirection

  // Predictive Analytics
  predictedCost       Float? // Next period prediction
  predictedDemand     Int? // Predicted beneficiaries
  predictedChallenges String[] // Anticipated challenges
  riskFactors         String[] // Identified risks
  opportunityAreas    String[] // Growth opportunities

  // Benchmarking Data
  industryBenchmark Float? // Industry average for key metric
  regionalAverage   Float? // Regional performance average
  performanceGap    Float? // Gap vs benchmark

  // Recommendations & Actions
  recommendations String[]
  actionItems     String[]
  priorityActions String[]
  quickWins       String[] // Easy improvements

  // Data Quality & Confidence
  dataCompleteness Float? // % of complete data
  confidenceLevel  Float? // Statistical confidence
  dataQualityNotes String?

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, analysisType, analysisPeriod])
  @@index([costEfficiency, qualityScore])
  @@map("performance_analytics")
}

model SppgBenchmarking {
  id     String @id @default(cuid())
  sppgId String

  // Benchmarking Configuration
  benchmarkDate   DateTime      @default(now())
  compareType     BenchmarkType
  benchmarkScope  String? // "Province", "Region", "Size Category"
  comparisonGroup String? // Description of comparison group

  // Sample Size & Validity
  comparisonSppgCount Int? // Number of SPPGs in comparison
  dataValidityPeriod  String // Period of comparison data

  // Performance Metrics Comparison
  ourCostPerPortion       Float
  benchmarkCostPerPortion Float
  costPerformanceRatio    Float? // Our cost / benchmark cost

  ourQualityScore         Float
  benchmarkQualityScore   Float
  qualityPerformanceRatio Float?

  ourEfficiencyScore         Float
  benchmarkEfficiencyScore   Float
  efficiencyPerformanceRatio Float?

  // Additional Metrics
  ourBeneficiaryCount       Int?
  benchmarkBeneficiaryCount Int?

  ourNutritionCompliance       Float?
  benchmarkNutritionCompliance Float?

  ourWastePercentage       Float?
  benchmarkWastePercentage Float?

  // Ranking & Position
  regionalRanking Int?
  nationalRanking Int?
  categoryRanking Int? // Within size category
  overallScore    Float? // Composite performance score

  // Percentile Performance
  costPercentile       Float? // What percentile we're in for cost
  qualityPercentile    Float?
  efficiencyPercentile Float?

  // Gap Analysis
  strengthAreas    String[] // Areas where we outperform
  improvementAreas String[] // Areas needing improvement
  criticalGaps     String[] // Significant underperformance
  opportunityAreas String[] // Potential for improvement

  // Best Practices Identified
  topPerformerPractices String[] // Practices from top performers
  applicablePractices   String[] // Practices we can adopt
  innovativeSolutions   String[] // Innovative approaches seen

  // Action Planning
  actionPlan           String[]
  priorityImprovements String[]
  resourceRequirements String[]
  timelineEstimate     String?

  // Follow-up
  nextBenchmarkDate  DateTime?
  improvementTargets Json? // Specific targets for next benchmark

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, benchmarkDate, compareType])
  @@index([regionalRanking, overallScore])
  @@map("sppg_benchmarking")
}

// ================================ USER MANAGEMENT & ACCESS CONTROL SYSTEM ================================

model UserPermission {
  id     String @id @default(cuid())
  userId String

  // Permission Details
  permission   PermissionType
  resourceType String // "SPPG", "MENU", "PROCUREMENT", etc.
  resourceId   String? // Specific resource ID (optional)
  accessLevel  AccessLevel    @default(READ_ONLY)

  // Permission Scope
  sppgId       String? // Limit permission to specific SPPG
  moduleAccess String[] // Specific modules accessible

  // Permission Lifecycle
  grantedBy String // User ID who granted permission
  grantedAt DateTime  @default(now())
  expiresAt DateTime?
  isActive  Boolean   @default(true)

  // Conditional Access
  conditions Json? // Conditions for permission (time-based, IP-based, etc.)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, permission, resourceType, resourceId])
  @@index([userId, isActive])
  @@index([permission, accessLevel])
  @@map("user_permissions")
}

model UserSession {
  id     String @id @default(cuid())
  userId String

  // Session Details
  sessionId  String  @unique
  ipAddress  String
  userAgent  String?
  deviceInfo Json? // Device fingerprint

  // Session Lifecycle
  startedAt    DateTime  @default(now())
  lastActiveAt DateTime  @default(now())
  expiresAt    DateTime
  endedAt      DateTime?

  // Session Type
  sessionType String @default("WEB") // "WEB", "MOBILE", "API"

  // Security
  isValid           Boolean @default(true)
  terminatedBy      String? // "USER", "ADMIN", "SYSTEM", "SECURITY"
  terminationReason String?

  // Activity Tracking
  pagesVisited     String[] // Track user navigation
  actionsPerformed String[] // Track user actions

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isValid])
  @@index([sessionId])
  @@map("user_sessions")
}

model UserActivity {
  id     String @id @default(cuid())
  userId String

  // Activity Details
  activityType String // "LOGIN", "LOGOUT", "CREATE", "UPDATE", "DELETE", "VIEW"
  module       String // "MENU", "PROCUREMENT", "DISTRIBUTION", etc.
  action       String // Specific action performed
  resourceType String? // Type of resource affected
  resourceId   String? // ID of affected resource

  // Activity Context
  ipAddress String?
  userAgent String?
  sessionId String?

  // Activity Data
  beforeData  Json? // Data before change (for updates)
  afterData   Json? // Data after change (for updates)
  searchQuery String? // For search activities
  filters     Json? // For filtered views

  // Activity Result
  success      Boolean @default(true)
  errorMessage String? // If activity failed
  responseTime Int? // Response time in ms

  // Activity Metadata
  timestamp DateTime @default(now())
  duration  Int? // Activity duration in ms

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId, activityType, timestamp])
  @@index([module, action])
  @@map("user_activities")
}

model UserAuditLog {
  id     String  @id @default(cuid())
  userId String?

  // Audit Details
  action     String // What happened
  entityType String // What type of entity was affected
  entityId   String // ID of affected entity

  // Change Details
  changes  Json? // What changed (old vs new values)
  metadata Json? // Additional metadata

  // Audit Context
  ipAddress String?
  userAgent String?
  requestId String? // Request correlation ID

  // Risk Assessment
  riskLevel      String  @default("LOW") // "LOW", "MEDIUM", "HIGH", "CRITICAL"
  flagged        Boolean @default(false)
  reviewRequired Boolean @default(false)

  // Audit Trail
  timestamp DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, timestamp])
  @@index([entityType, entityId])
  @@index([riskLevel, flagged])
  @@map("user_audit_logs")
}

// === Role-Based Access Control (RBAC) ===
model RolePermissionMatrix {
  id String @id @default(cuid())

  // Role Definition
  role        UserRole
  permission  PermissionType
  accessLevel AccessLevel

  // Scope & Conditions
  moduleScope String[] // Which modules this applies to
  conditions  Json? // Additional conditions

  // Matrix Metadata
  description String?
  isDefault   Boolean @default(true)
  isActive    Boolean @default(true)

  // Management
  createdBy      String // Admin who created this mapping
  lastModifiedBy String? // Admin who last modified

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([role, permission, moduleScope])
  @@index([role, isActive])
  @@map("role_permission_matrix")
}

// === Demo Request & Management ===
model PlatformDemoRequest {
  id String @id @default(cuid())

  // Requester Information
  firstName String
  lastName  String
  email     String
  phone     String
  company   String?
  position  String?

  // Request Details
  demoType           String   @default("STANDARD") // "STANDARD", "CUSTOM", "EXTENDED"
  requestMessage     String?
  interestedFeatures String[] // Features they want to see

  // Scheduling
  preferredDate DateTime?
  preferredTime String? // "MORNING", "AFTERNOON", "EVENING"
  timezone      String    @default("Asia/Jakarta")

  // Demo Configuration
  demoDuration Int    @default(60) // Minutes
  demoMode     String @default("ONLINE") // "ONLINE", "ONSITE", "HYBRID"

  // Status Management
  status        UserDemoStatus @default(REQUESTED)
  scheduledDate DateTime?
  actualDate    DateTime?

  // Assignment
  assignedTo String? // Sales/Demo person
  assignedAt DateTime?

  // Follow-up
  followUpRequired      Boolean   @default(true)
  followUpDate          DateTime?
  conversionProbability Float? // 0-100%

  // Demo Outcome
  attendanceStatus String? // "ATTENDED", "NO_SHOW", "RESCHEDULED"
  feedbackScore    Float? // 1-10 rating
  feedback         String?
  nextSteps        String[]

  // Conversion Tracking
  isConverted Boolean   @default(false)
  convertedAt DateTime?
  sppgId      String? // If converted, which SPPG was created

  // Communication Log
  emailsSent      Int       @default(0)
  callsMade       Int       @default(0)
  lastContactDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, status])
  @@index([assignedTo, scheduledDate])
  @@index([status, createdAt])
  @@map("platform_demo_requests")
}

// === User Onboarding & Training ===
model UserOnboarding {
  id     String @id @default(cuid())
  userId String @unique

  // Onboarding Progress
  currentStep     String   @default("PROFILE_SETUP")
  completedSteps  String[] // Steps completed
  totalSteps      Int      @default(10)
  progressPercent Float    @default(0)

  // Training Modules
  trainingModules Json? // Training modules assigned/completed
  trainingScore   Float? // Overall training score

  // Onboarding Timeline
  startedAt           DateTime  @default(now())
  completedAt         DateTime?
  estimatedCompletion DateTime?

  // Support & Guidance
  assignedMentor String? // Mentor user ID
  helpRequests   Int      @default(0)
  supportTickets String[] // Related support ticket IDs

  // Onboarding Feedback
  satisfactionScore      Float? // 1-10
  feedback               String?
  improvementSuggestions String[]

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([currentStep, progressPercent])
  @@map("user_onboarding")
}

// ================================ INDONESIA REGIONAL MASTER DATA ================================

model Province {
  id String @id @default(cuid())

  // Official BPS Data
  provinceCode String @unique // "11", "31", "32" (2 digit BPS)
  provinceName String // "Aceh", "DKI Jakarta", "Jawa Barat"

  // Geographic Information
  region      IndonesiaRegion // SUMATERA, JAWA, KALIMANTAN, etc.
  timezone    Timezone // WIB, WITA, WIT
  coordinates Json? // Geographic center coordinates

  // Administrative
  capital  String // "Banda Aceh", "Jakarta", "Bandung"
  isActive Boolean @default(true)

  // Platform Management
  createdBy String // Platform admin who added
  updatedBy String // Platform admin who last updated

  // Relations
  regencies     Regency[]
  sppgProvinces SPPG[]    @relation("SppgProvince")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([region, isActive])
  @@map("provinces_indonesia")
}

model Regency {
  id String @id @default(cuid())

  // Hierarchical Reference
  provinceId String

  // Official BPS Data
  regencyCode String // "1101", "3171", "3201" (4 digit BPS)
  regencyName String // "Simeulue", "Jakarta Selatan", "Bogor"
  regencyType RegencyType // REGENCY, CITY

  // Administrative
  capital    String? // Regency capital
  area       Float? // Luas wilayah (km²)
  population Int? // Jumlah penduduk (optional, bisa diupdate)

  // Platform Status
  isActive Boolean @default(true)

  // Platform Management
  createdBy String
  updatedBy String

  // Relations
  province    Province   @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  districts   District[]
  sppgRegency SPPG[]     @relation("SppgRegency")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provinceId, regencyCode])
  @@index([provinceId, regencyType])
  @@map("regencies_indonesia")
}

model District {
  id String @id @default(cuid())

  // Hierarchical Reference
  regencyId String

  // Official BPS Data
  districtCode String // "110101", "317101", "320101" (6 digit BPS)
  districtName String // "Teupah Selatan", "Tebet", "Bogor Selatan"

  // Administrative
  area       Float? // Luas wilayah (km²)
  population Int? // Jumlah penduduk

  // Platform Status
  isActive Boolean @default(true)

  // Platform Management  
  createdBy String
  updatedBy String

  // Relations
  regency      Regency   @relation(fields: [regencyId], references: [id], onDelete: Cascade)
  villages     Village[]
  sppgDistrict SPPG[]    @relation("SppgDistrict")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([regencyId, districtCode])
  @@index([regencyId])
  @@map("districts_indonesia")
}

model Village {
  id String @id @default(cuid())

  // Hierarchical Reference
  districtId String

  // Official BPS Data
  villageCode String // "1101011001", "3171011001" (10 digit BPS)
  villageName String // "Latiung", "Tebet Timur", "Babakan"
  villageType VillageType // URBAN_VILLAGE, RURAL_VILLAGE

  // Administrative
  area       Float? // Luas wilayah (km²)
  population Int? // Jumlah penduduk
  postalCode String? // Kode pos

  // Platform Status
  isActive Boolean @default(true)

  // Platform Management
  createdBy String
  updatedBy String

  // Relations
  district        District            @relation(fields: [districtId], references: [id], onDelete: Cascade)
  sppgVillage     SPPG[]              @relation("SppgVillage")
  employeeVillage Employee[]          @relation("EmployeeVillage")
  schoolVillage   SchoolBeneficiary[] @relation("SchoolVillage")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([districtId, villageCode])
  @@index([districtId, villageType])
  @@map("villages_indonesia")
}

// Regional Data Update Audit Log
model RegionalDataUpdateLog {
  id String @id @default(cuid())

  updateType String // "ADD", "UPDATE", "DELETE", "BULK_IMPORT"
  entityType String // "PROVINCE", "REGENCY", "DISTRICT", "VILLAGE"
  entityId   String

  oldData Json?
  newData Json?

  updatedBy    String // Platform admin
  updateReason String

  createdAt DateTime @default(now())

  @@index([entityType, updatedBy])
  @@index([updateType, createdAt])
  @@map("regional_data_update_logs")
}

// ================================ MARKETING WEBSITE SYSTEM ================================

// === Landing Page Management ===
model LandingPage {
  id String @id @default(cuid())

  // Page Configuration
  title           String
  slug            String  @unique // URL path
  description     String?
  metaTitle       String?
  metaDescription String?

  // Content Structure  
  heroSection        Json // { title, subtitle, cta, image }
  featuresSection    Json // Array of features
  pricingSection     Json // Pricing display config
  testimonialSection Json // Selected testimonials
  faqSection         Json // Selected FAQs

  // SEO & Analytics
  keywords     String[]
  ogImage      String? // Open Graph image
  canonicalUrl String?

  // Configuration
  isActive       Boolean             @default(true)
  template       LandingPageTemplate @default(DEFAULT)
  targetAudience TargetAudience      @default(GENERAL)

  // A/B Testing
  variantOf     String? // Parent page for variants
  variantWeight Int     @default(100) // Traffic percentage

  // Tracking
  views          Int   @default(0)
  conversions    Int   @default(0)
  conversionRate Float @default(0)

  // Relations
  leadCaptures  LeadCapture[]
  pageAnalytics PageAnalytics[]
  abTests       ABTest[]

  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug, isActive])
  @@index([targetAudience, isActive])
  @@map("landing_pages")
}

// === A/B Testing System ===
model ABTest {
  id String @id @default(cuid())

  // Test Configuration
  name        String
  description String?
  hypothesis  String?

  // Landing Page Reference
  landingPageId String
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id], onDelete: Cascade)

  // Test Settings
  targetMetric    ABTestMetric @default(CONVERSION_RATE)
  confidenceLevel Float        @default(0.95)

  // Test Duration
  startDate DateTime?
  endDate   DateTime?
  duration  Int? // Duration in days

  // Test Status
  status ABTestStatus @default(DRAFT)

  // Results
  winner           String? // Variant ID
  statisticalPower Float?
  pValue           Float?
  conversionLift   Float?

  // Relations
  variants ABTestVariant[]

  // Metadata
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([landingPageId, status])
  @@map("ab_tests")
}

model ABTestVariant {
  id String @id @default(cuid())

  // Variant Configuration
  name              String
  trafficPercentage Int     @default(50) // Percentage of traffic
  isControl         Boolean @default(false)

  // Content
  content Json // Variant-specific content overrides

  // Test Reference
  testId String
  test   ABTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  // Metrics
  views       Int @default(0)
  conversions Int @default(0)
  bounces     Int @default(0)

  // Performance
  conversionRate Float @default(0)
  bounceRate     Float @default(0)
  engagementRate Float @default(0)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([testId])
  @@map("ab_test_variants")
}

enum ABTestStatus {
  DRAFT
  RUNNING
  PAUSED
  COMPLETED
  ARCHIVED
}

enum ABTestMetric {
  CONVERSION_RATE
  CLICK_THROUGH_RATE
  BOUNCE_RATE
  ENGAGEMENT_TIME
  FORM_SUBMISSIONS
}

// === Content Management System ===
model BlogPost {
  id String @id @default(cuid())

  // Content
  title   String
  slug    String  @unique
  excerpt String?
  content String // Rich text/markdown

  // Media
  featuredImage String?
  gallery       String[] // Additional images

  // SEO
  metaTitle       String?
  metaDescription String?
  keywords        String[]

  // Organization
  category BlogCategory
  tags     String[]

  // Publishing
  status      ContentStatus @default(DRAFT)
  publishedAt DateTime?
  scheduledAt DateTime?

  // Engagement
  views  Int @default(0)
  likes  Int @default(0)
  shares Int @default(0)

  // Relations
  author   User          @relation(fields: [authorId], references: [id])
  authorId String
  comments BlogComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category, status])
  @@index([publishedAt, status])
  @@map("blog_posts")
}

model BlogComment {
  id String @id @default(cuid())

  // Content
  content String
  author  String // Name
  email   String
  website String?

  // Moderation
  status     CommentStatus @default(PENDING)
  isApproved Boolean       @default(false)

  // Relations
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId String

  // Reply system
  parentId String?
  parent   BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  BlogComment[] @relation("CommentReplies")

  createdAt DateTime @default(now())

  @@index([blogPostId, status])
  @@map("blog_comments")
}

// === Testimonial & Case Study Management ===
model Testimonial {
  id String @id @default(cuid())

  // Customer Information
  customerName     String
  customerTitle    String? // Position/title
  organizationName String
  organizationType OrganizationType

  // Testimonial Content
  content String
  rating  Int // 1-5 stars

  // Media
  customerPhoto    String?
  organizationLogo String?
  videoUrl         String? // Video testimonial

  // Metrics (if case study)
  isCaseStudy     Boolean @default(false)
  metricsImproved Json? // Before/after metrics

  // Usage & Display
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  displayLocation String[] // Where to show: ["homepage", "pricing", "features"]

  // Relations
  sppgId    String? // Link to customer SPPG
  sppg      SPPG?      @relation(fields: [sppgId], references: [id])
  caseStudy CaseStudy?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive, isFeatured])
  @@index([organizationType, isActive])
  @@map("testimonials")
}

model CaseStudy {
  id String @id @default(cuid())

  // Basic Information
  title   String
  slug    String @unique
  summary String

  // Customer
  customerName     String
  organizationName String
  organizationType OrganizationType
  location         String?

  // Challenge & Solution
  challenge      String // What problem they faced
  solution       String // How our platform helped
  implementation String // Implementation process

  // Results & Metrics
  results     String
  keyMetrics  Json // Quantified improvements
  beforeAfter Json // Before/after comparison

  // Media
  featuredImage String?
  gallery       String[]
  videoUrl      String?

  // SEO
  metaDescription String?
  keywords        String[]

  // Publishing
  status      ContentStatus @default(DRAFT)
  publishedAt DateTime?

  // Relations
  sppgId        String?
  sppg          SPPG?        @relation(fields: [sppgId], references: [id])
  testimonialId String?      @unique
  testimonial   Testimonial? @relation(fields: [testimonialId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug, status])
  @@index([organizationType, status])
  @@map("case_studies")
}

// === FAQ & Help Center ===
model FAQ {
  id String @id @default(cuid())

  // Content
  question String
  answer   String

  // Organization
  category FAQCategory
  tags     String[]

  // Usage
  isActive Boolean @default(true)
  isPinned Boolean @default(false)
  order    Int     @default(0)

  // Analytics
  views      Int @default(0)
  helpful    Int @default(0) // "Was this helpful?" positive
  notHelpful Int @default(0) // "Was this helpful?" negative

  // Relations
  relatedFAQs String[] // IDs of related FAQs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category, isActive])
  @@index([isPinned, order])
  @@map("faqs")
}

model HelpArticle {
  id String @id @default(cuid())

  // Content
  title   String
  slug    String  @unique
  content String
  excerpt String?

  // Organization
  category   HelpCategory
  difficulty DifficultyLevel @default(BEGINNER)
  tags       String[]

  // SEO & Discovery
  metaDescription String?
  keywords        String[]
  searchKeywords  String[] // Internal search optimization

  // Publishing
  status      ContentStatus @default(DRAFT)
  publishedAt DateTime?

  // Analytics
  views       Int  @default(0)
  helpful     Int  @default(0)
  notHelpful  Int  @default(0)
  avgReadTime Int? // Estimated read time in minutes

  // Relations
  relatedArticles String[] // IDs of related articles
  faqs            String[] // Related FAQ IDs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category, status])
  @@index([slug, status])
  @@map("help_articles")
}

// === Lead Capture & Marketing ===
model LeadCapture {
  id String @id @default(cuid())

  // Lead Information
  name             String
  email            String
  phone            String?
  organizationName String?
  position         String?

  // Lead Context
  source   LeadSource
  medium   String? // utm_medium
  campaign String? // utm_campaign
  content  String? // utm_content
  term     String? // utm_term

  // Form Context
  formType     LeadFormType
  formLocation String // Which page/section
  leadMagnet   String? // What they downloaded/requested

  // Lead Qualification
  organizationType OrganizationType?
  estimatedUsers   Int?
  estimatedBudget  Float?
  timeline         String? // When they plan to implement
  specificNeeds    String[]

  // Tracking
  ipAddress String?
  userAgent String?
  referrer  String?

  // Processing
  status      LeadStatus @default(NEW)
  score       Int        @default(0) // Lead scoring
  isQualified Boolean    @default(false)

  // Follow-up
  assignedTo      String? // Sales rep
  lastContactedAt DateTime?
  nextFollowUpAt  DateTime?
  notes           String?

  // Conversion
  convertedAt         DateTime?
  convertedToDemo     Boolean   @default(false)
  demoRequestId       String?
  convertedToCustomer Boolean   @default(false)
  sppgId              String?

  // Relations
  landingPage   LandingPage? @relation(fields: [landingPageId], references: [id])
  landingPageId String?
  demoRequest   DemoRequest? @relation(fields: [demoRequestId], references: [id])
  sppg          SPPG?        @relation(fields: [sppgId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email])
  @@index([status, score])
  @@index([source, createdAt])
  @@map("lead_captures")
}

// === Image Management System ===
model ImageFolder {
  id String @id @default(cuid())

  // Folder Information
  name        String
  description String?
  color       String? // Hex color for UI

  // Hierarchy
  parentId String?
  parent   ImageFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children ImageFolder[] @relation("FolderHierarchy")

  // Relations
  images ImageFile[]

  // Metadata
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId])
  @@map("image_folders")
}

model ImageFile {
  id String @id @default(cuid())

  // File Information
  name         String
  filename     String  @unique
  originalName String
  path         String  @unique
  alt          String?
  description  String?

  // File Details
  size     Int
  mimeType String
  width    Int?
  height   Int?

  // Organization
  tags     String[]
  folderId String?
  folder   ImageFolder? @relation(fields: [folderId], references: [id])

  // Usage Tracking
  usageCount Int       @default(0)
  lastUsedAt DateTime?

  // Metadata
  uploadedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([folderId])
  @@index([uploadedBy])
  @@index([mimeType])
  @@map("image_files")
}

// === Template Management System ===
model Template {
  id String @id @default(cuid())

  // Template Information
  name        String
  description String?
  category    TemplateCategory @default(HEALTHCARE)

  // Template Configuration
  content  Json // Template structure and content
  settings Json // Design settings (colors, fonts, layout)
  preview  String? // Preview image URL

  // Template Properties
  isPremium Boolean @default(false)
  isActive  Boolean @default(true)
  isPopular Boolean @default(false)

  // Usage Statistics
  usageCount  Int   @default(0)
  rating      Float @default(0)
  ratingCount Int   @default(0)

  // Features
  features String[] // List of template features
  sections String[] // Available sections

  // SEO & Discovery
  tags     String[]
  keywords String[]

  // Metadata
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category, isActive])
  @@index([isPopular, isActive])
  @@map("templates")
}

enum TemplateCategory {
  HEALTHCARE
  BUSINESS
  EDUCATION
  GOVERNMENT
  NONPROFIT
  ECOMMERCE
  TECHNOLOGY
  FINANCE
  LEGAL
  REAL_ESTATE
}

// === Marketing Analytics ===
model PageAnalytics {
  id String @id @default(cuid())

  // Page Information
  pageType PageType
  pageId   String? // Landing page ID, blog post ID, etc.
  url      String
  title    String?

  // Date
  date DateTime @db.Date

  // Traffic Metrics
  sessions       Int   @default(0)
  pageviews      Int   @default(0)
  uniqueVisitors Int   @default(0)
  bounceRate     Float @default(0)
  avgSessionTime Int   @default(0) // Seconds

  // Source Metrics
  organicTraffic  Int @default(0)
  directTraffic   Int @default(0)
  referralTraffic Int @default(0)
  socialTraffic   Int @default(0)
  paidTraffic     Int @default(0)

  // Conversion Metrics
  leadCaptures   Int   @default(0)
  demoRequests   Int   @default(0)
  conversionRate Float @default(0)

  // Engagement Metrics
  timeOnPage  Int   @default(0) // Average seconds
  scrollDepth Float @default(0) // Percentage
  exitRate    Float @default(0)

  // Relations
  landingPage LandingPage? @relation(fields: [pageId], references: [id])

  @@unique([pageType, pageId, date])
  @@index([date, pageType])
  @@map("page_analytics")
}

model MarketingCampaign {
  id String @id @default(cuid())

  // Campaign Information
  name        String
  description String?

  // Campaign Configuration
  type   CampaignType
  status CampaignStatus @default(DRAFT)

  // Timing
  startDate DateTime
  endDate   DateTime?

  // Budget & Targeting
  budget         Float?
  targetAudience Json // Audience configuration

  // UTM Tracking
  utmSource   String? // google, facebook, linkedin
  utmMedium   String? // cpc, email, social
  utmCampaign String // Campaign identifier
  utmContent  String? // Ad variation
  utmTerm     String? // Keywords

  // Goals
  primaryGoal       CampaignGoal
  targetLeads       Int?
  targetConversions Int?
  targetRevenue     Float?

  // Performance
  totalSpend       Float @default(0)
  totalLeads       Int   @default(0)
  totalConversions Int   @default(0)
  totalRevenue     Float @default(0)

  // ROI Metrics
  costPerLead        Float @default(0)
  costPerAcquisition Float @default(0)
  returnOnInvestment Float @default(0)

  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, startDate])
  @@index([type, status])
  @@map("marketing_campaigns")
}

// ================================ DEMO SYSTEM ================================

// === Demo Request & Trial Management ===
model DemoRequest {
  id String @id @default(cuid())

  // Requester Information
  organizationName String
  picName          String
  picEmail         String  @unique
  picPhone         String
  picWhatsapp      String? // WhatsApp number (optional)
  picPosition      String?

  // Organization Details  
  organizationType    OrganizationType @default(YAYASAN)
  targetBeneficiaries Int? // Estimasi penerima manfaat
  operationalArea     String? // Wilayah operasional
  currentSystem       String? // Sistem yang sedang dipakai
  currentChallenges   String[] // Current challenges faced by organization
  expectedGoals       String[] // Expected goals to achieve with Bergizi.ID

  // Demo Configuration
  demoType            DemoType @default(STANDARD)
  requestedFeatures   String[] // Fitur yang ingin dicoba
  specialRequirements String?

  // Scheduling
  preferredStartDate DateTime?
  estimatedDuration  Int       @default(14) // Default 14 hari

  // Status Management
  status          DemoRequestStatus @default(SUBMITTED)
  reviewedAt      DateTime?
  reviewedBy      String? // Platform admin ID
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?

  // Demo Account Creation
  demoSppgId    String? // Created demo SPPG ID
  demoCreatedAt DateTime?
  demoExpiresAt DateTime?

  // Conversion Tracking
  isConverted     Boolean   @default(false)
  convertedAt     DateTime?
  convertedSppgId String? // Production SPPG ID after conversion

  // Communication Log
  lastContactAt    DateTime?
  followUpRequired Boolean   @default(true)
  notes            String?

  // Relations
  demoSppg       SPPG?         @relation("DemoSppg", fields: [demoSppgId], references: [id])
  productionSppg SPPG?         @relation("ConvertedSppg", fields: [convertedSppgId], references: [id])
  leadCaptures   LeadCapture[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([picEmail, status])
  @@index([status, demoExpiresAt])
  @@index([organizationName])
  @@map("demo_requests")
}

// === Demo Analytics & Tracking ===
model DemoAnalytics {
  id     String @id @default(cuid())
  sppgId String @unique

  // Usage Statistics
  loginCount           Int      @default(0)
  featuresUsed         String[] // Which features were tried
  beneficiariesAdded   Int      @default(0)
  menusCreated         Int      @default(0)
  procurementsCreated  Int      @default(0)
  distributionsCreated Int      @default(0)

  // Engagement Metrics
  sessionDuration        Int[] // Array of session durations (minutes)
  lastActiveDate         DateTime?
  totalActiveTime        Int       @default(0) // Total minutes spent
  averageSessionDuration Float? // Average session length

  // Feature Usage Depth
  menuPlanningUsage Json? // Detailed menu planning usage
  procurementUsage  Json? // Procurement feature usage
  distributionUsage Json? // Distribution feature usage
  reportingUsage    Json? // Reporting feature usage

  // Conversion Indicators
  upgradePromptShown    Int      @default(0)
  pricingPageViews      Int      @default(0)
  helpDocumentsViewed   String[]
  supportTicketsCreated Int      @default(0)

  // Engagement Score
  engagementScore       Float? // 0-100 based on usage patterns
  conversionProbability Float? // 0-100 predicted conversion chance

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("demo_analytics")
}

// ================================ MARKETING WEBSITE ENUMS ================================

enum LandingPageTemplate {
  DEFAULT
  GOVERNMENT // For government/public sector
  CORPORATE // For corporate SPPG
  NGO // For NGO/foundation
  STARTUP // For startup/tech-forward orgs
}

enum TargetAudience {
  GENERAL
  GOVERNMENT
  CORPORATE
  NGO
  HEALTHCARE
  EDUCATION
}

enum BlogCategory {
  NEWS // Company news
  CASE_STUDY // Customer success stories
  TUTORIAL // How-to guides
  INDUSTRY // Industry insights
  REGULATION // Regulatory updates
  TECHNOLOGY // Tech updates
  NUTRITION // Nutrition science
}

enum ContentStatus {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum FAQCategory {
  GENERAL // General questions
  PRICING // Pricing & billing
  FEATURES // Feature questions
  TECHNICAL // Technical support
  COMPLIANCE // Regulatory compliance
  INTEGRATION // System integration
  TRAINING // Training & onboarding
}

enum HelpCategory {
  GETTING_STARTED
  USER_GUIDE
  ADMIN_GUIDE
  INTEGRATION
  TROUBLESHOOTING
  BEST_PRACTICES
  API_DOCUMENTATION
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum LeadSource {
  WEBSITE // Organic website visit
  GOOGLE_ADS // Google Ads
  FACEBOOK_ADS // Facebook/Meta Ads
  LINKEDIN_ADS // LinkedIn Ads
  SEARCH_ORGANIC // Organic search
  REFERRAL // Referral from other sites
  DIRECT // Direct traffic
  EMAIL // Email marketing
  SOCIAL // Social media organic
  WEBINAR // Webinar registration
  CONTENT // Content download
  DEMO // Demo request
}

enum LeadFormType {
  CONTACT_FORM // General contact
  DEMO_REQUEST // Demo request
  NEWSLETTER // Newsletter signup
  WHITEPAPER // Content download
  PRICING_INQUIRY // Pricing request
  CONSULTATION // Free consultation
  TRIAL_REQUEST // Trial request
}

enum LeadStatus {
  NEW // Just captured
  CONTACTED // First contact made
  QUALIFIED // Qualified lead
  NURTURING // In nurturing sequence
  DEMO_SCHEDULED // Demo scheduled
  PROPOSAL_SENT // Proposal sent
  NEGOTIATION // In negotiation
  CONVERTED // Became customer
  LOST // Lost opportunity
  UNQUALIFIED // Not qualified
}

enum PageType {
  LANDING_PAGE
  BLOG_POST
  CASE_STUDY
  FAQ_PAGE
  PRICING_PAGE
  FEATURES_PAGE
  CONTACT_PAGE
  ABOUT_PAGE
}

enum CampaignType {
  GOOGLE_ADS
  FACEBOOK_ADS
  LINKEDIN_ADS
  EMAIL_MARKETING
  CONTENT_MARKETING
  WEBINAR
  REFERRAL
  PARTNERSHIP
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum CampaignGoal {
  BRAND_AWARENESS
  LEAD_GENERATION
  DEMO_REQUESTS
  CUSTOMER_ACQUISITION
  CONTENT_ENGAGEMENT
  WEBINAR_REGISTRATION
}

// ================================ PLATFORM MANAGEMENT ADVANCED ================================

// === Platform Analytics ===
model PlatformAnalytics {
  id String @id @default(cuid())

  // Date & Metrics
  date DateTime @db.Date

  // Platform Usage
  totalUsers   Int @default(0)
  activeUsers  Int @default(0)
  newSignups   Int @default(0)
  churnedUsers Int @default(0)

  // SPPG Metrics
  totalSppg  Int @default(0)
  activeSppg Int @default(0)
  newSppg    Int @default(0)

  // Revenue Metrics
  totalRevenue   Float @default(0)
  newRevenue     Float @default(0)
  churnedRevenue Float @default(0)

  // Usage Metrics
  totalSessions  Int @default(0)
  avgSessionTime Int @default(0)
  totalApiCalls  Int @default(0)

  // Support Metrics
  ticketsCreated    Int @default(0)
  ticketsResolved   Int @default(0)
  avgResolutionTime Int @default(0)

  createdAt DateTime @default(now())

  @@unique([date])
  @@map("platform_analytics")
}

// === System Configuration Management ===
model SystemConfiguration {
  id String @id @default(cuid())

  // Configuration Key
  key       String          @unique
  value     String
  valueType ConfigValueType @default(STRING)

  // Metadata
  category    ConfigCategory
  description String?
  isPublic    Boolean        @default(false)
  isRequired  Boolean        @default(false)

  // Validation
  validationRule String? // Regex or validation rule
  defaultValue   String?

  // Access Control
  accessLevel    ConfigAccessLevel @default(ADMIN)
  lastModifiedBy String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category, isPublic])
  @@map("system_configurations")
}

// === Feature Flag Management ===
model FeatureFlag {
  id String @id @default(cuid())

  // Feature Details
  name        String  @unique
  description String?

  // Status
  isEnabled Boolean @default(false)

  // Rollout Configuration
  rolloutPercent Int                @default(0) // 0-100%
  targetTiers    SubscriptionTier[]
  targetSppgIds  String[] // Specific SPPG targets

  // Environment
  environment Environment @default(PRODUCTION)

  // Metadata
  createdBy  String
  enabledAt  DateTime?
  disabledAt DateTime?

  // Relations
  usages FeatureUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isEnabled, environment])
  @@map("feature_flags")
}

model FeatureUsage {
  id String @id @default(cuid())

  // Feature Reference
  featureFlagId String
  featureFlag   FeatureFlag @relation(fields: [featureFlagId], references: [id])

  // Usage Context
  sppgId String?
  userId String?

  // Usage Data
  usedAt  DateTime @default(now())
  context Json? // Additional context

  // Relations
  sppg SPPG? @relation(fields: [sppgId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@index([featureFlagId, usedAt])
  @@map("feature_usages")
}

// === Platform Management Enums ===
enum ConfigValueType {
  STRING
  INTEGER
  FLOAT
  BOOLEAN
  JSON
}

enum ConfigCategory {
  GENERAL
  PAYMENT
  EMAIL
  NOTIFICATION
  SECURITY
  INTEGRATION
  FEATURE_FLAGS
}

enum ConfigAccessLevel {
  PUBLIC
  USER
  ADMIN
  SUPER_ADMIN
}

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

// Master Data Models for Demo Configuration
model DemoFeature {
  id           String  @id @default(cuid())
  name         String  @unique
  displayName  String
  description  String?
  category     String? // e.g., "core", "advanced", "integration"
  displayOrder Int     @default(0)
  isActive     Boolean @default(true)
  icon         String? // Icon name for UI

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("demo_features")
}

model DemoChallenge {
  id           String  @id @default(cuid())
  name         String  @unique
  displayName  String
  description  String?
  category     String? // e.g., "operational", "technical", "management"
  severity     String? // e.g., "low", "medium", "high", "critical"
  displayOrder Int     @default(0)
  isActive     Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("demo_challenges")
}

model DemoGoal {
  id           String  @id @default(cuid())
  name         String  @unique
  displayName  String
  description  String?
  category     String? // e.g., "efficiency", "quality", "compliance", "cost"
  impact       String? // e.g., "low", "medium", "high"
  displayOrder Int     @default(0)
  isActive     Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("demo_goals")
}

// ================================ FEEDBACK SYSTEM ================================

model BeneficiaryFeedback {
  id        String  @id @default(cuid())
  sppgId    String
  programId String?

  // Beneficiary Information
  beneficiaryId   String?
  beneficiaryName String
  beneficiaryType BeneficiaryType
  school          String?
  grade           String?
  age             Int?

  // Feedback Content
  feedbackType FeedbackType
  subject      String
  message      String
  rating       Int? // 1-5 stars
  tags         String[] // ["taste", "portion", "nutrition", "service"]

  // Additional Details
  menuId         String? // Which menu being reviewed
  distributionId String? // Which distribution session
  photos         String[] // Photo evidence URLs
  anonymous      Boolean  @default(false)

  // Status & Processing
  status     FeedbackStatus   @default(PENDING)
  priority   FeedbackPriority @default(MEDIUM)
  category   String? // Auto-categorized: "quality", "service", "nutrition", etc.
  sentiment  String? // "positive", "negative", "neutral"
  aiAnalysis Json? // AI-powered feedback analysis

  // Response & Resolution
  responseRequired Boolean   @default(false)
  respondedAt      DateTime?
  respondedBy      String? // Staff user ID
  response         String?
  resolved         Boolean   @default(false)
  resolvedAt       DateTime?
  actionTaken      String?

  // Relations
  sppg         SPPG               @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  program      NutritionProgram?  @relation(fields: [programId], references: [id])
  menu         NutritionMenu?     @relation(fields: [menuId], references: [id])
  distribution FoodDistribution?  @relation(fields: [distributionId], references: [id])
  beneficiary  SchoolBeneficiary? @relation(fields: [beneficiaryId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sppgId, status])
  @@index([feedbackType, rating])
  @@index([createdAt])
  @@map("beneficiary_feedback")
}

model FeedbackSummary {
  id     String @id @default(cuid())
  sppgId String

  // Time Period
  period    String // "daily", "weekly", "monthly"
  date      DateTime
  startDate DateTime
  endDate   DateTime

  // Metrics
  totalFeedback    Int   @default(0)
  averageRating    Float @default(0)
  positiveFeedback Int   @default(0)
  negativeFeedback Int   @default(0)
  neutralFeedback  Int   @default(0)

  // By Category
  qualityFeedback   Int @default(0)
  serviceFeedback   Int @default(0)
  nutritionFeedback Int @default(0)
  portionFeedback   Int @default(0)

  // Response Stats
  responseRate        Float @default(0)
  averageResponseTime Float @default(0) // Hours
  resolutionRate      Float @default(0)

  // Satisfaction Tracking
  satisfactionScore   Float @default(0) // Overall satisfaction
  recommendationScore Float @default(0) // NPS-like score

  // Relations
  sppg SPPG @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sppgId, period, date])
  @@index([sppgId, period])
  @@map("feedback_summary")
}
