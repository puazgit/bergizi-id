# Docker Compose for Bergizi-ID Enterprise SaaS Platform
# Production-ready PostgreSQL 17, pgAdmin 4, and Redis 7 stack

version: '3.8'

services:
  # PostgreSQL 17 - Enterprise Database
  postgres:
    image: postgres:17-alpine
    container_name: bergizi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: bergizi_id
      POSTGRES_USER: bergizi_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bergizi_secure_2024}
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=md5"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - bergizi-network
    command: >
      postgres
        -c shared_preload_libraries=pg_stat_statements
        -c pg_stat_statements.track=all
        -c max_connections=200
        -c shared_buffers=256MB
        -c effective_cache_size=1GB
        -c maintenance_work_mem=64MB
        -c checkpoint_completion_target=0.7
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=4MB
        -c min_wal_size=1GB
        -c max_wal_size=4GB
        -c log_statement=all
        -c log_duration=on
        -c log_min_duration_statement=1000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bergizi_admin -d bergizi_id"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # pgAdmin 4 - Database Administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: bergizi-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@bergizi.id
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_secure_2024}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - bergizi-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 7 - Enterprise Caching & Session Store
  redis:
    image: redis:7-alpine
    container_name: bergizi-redis
    restart: unless-stopped
    command: >
      redis-server
        --appendonly yes
        --appendfsync everysec
        --auto-aof-rewrite-percentage 100
        --auto-aof-rewrite-min-size 64mb
        --maxmemory 512mb
        --maxmemory-policy allkeys-lru
        --timeout 300
        --tcp-keepalive 60
        --save 900 1
        --save 300 10
        --save 60 10000
        --requirepass ${REDIS_PASSWORD:-redis_secure_2024}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - bergizi-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # Redis Commander - Redis Management UI (Optional for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: bergizi-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis_secure_2024}
      HTTP_USER: admin
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-redis_admin_2024}
    ports:
      - "8081:8081"
    networks:
      - bergizi-network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - dev
      - development

# Named Volumes for Data Persistence
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/postgres
  pgadmin_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/pgadmin
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/redis

# Enterprise Network Configuration
networks:
  bergizi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: bergizi-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"